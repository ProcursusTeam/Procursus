diff -urN xar/lib/archive.h.old xar/lib/archive.h
--- xar/lib/archive.h.old	2020-10-05 23:19:25.000000000 -0400
+++ xar/lib/archive.h	2020-10-05 23:19:46.000000000 -0400
@@ -40,12 +40,7 @@
 #define _XAR_ARCHIVE_H_
 #include <zlib.h>
 #include <libxml/hash.h>
-#ifdef __APPLE__
-#include <CommonCrypto/CommonDigest.h>
-#include <CommonCrypto/CommonDigestSPI.h>
-#else
 #include <openssl/evp.h>
-#endif
 #include <sys/types.h>
 #include <sys/stat.h>
 #include "xar.h"
diff -urN xar/lib/hash.c.orig xar/lib/hash.c
--- xar/lib/hash.c.orig	2020-10-06 00:15:14.000000000 -0400
+++ xar/lib/hash.c	2020-10-06 00:18:42.000000000 -0400
@@ -41,12 +41,7 @@
 #include <string.h>
 #include <sys/types.h>
 #include <zlib.h>
-#ifdef __APPLE__
-#include <CommonCrypto/CommonDigest.h>
-#include <CommonCrypto/CommonDigestSPI.h>
-#else
 #include <openssl/evp.h>
-#endif
 
 #include "xar.h"
 #include "hash.h"
@@ -58,48 +53,12 @@
 
 #pragma mark Hash Wrapper Object
 
-#ifdef __APPLE__
-
-CCDigestRef digestRef_from_name(const char* name, unsigned int *outHashSize) {
-    CCDigestRef result = NULL;
-    
-    if (NULL != outHashSize)
-        *outHashSize = 0;
-    
-	if (0 == strcasecmp(name, "sha512")) {
-        result = CCDigestCreate(kCCDigestSHA512);
-        if (NULL != outHashSize)
-            *outHashSize = CC_SHA512_DIGEST_LENGTH;
-    } else if (0 == strcasecmp(name, "sha256")) {
-        result = CCDigestCreate(kCCDigestSHA256);
-        if (NULL != outHashSize)
-            *outHashSize = CC_SHA256_DIGEST_LENGTH;
-    } else if (0 == strcasecmp(name, "sha") || !strcasecmp(name, "sha1")) {
-        result = CCDigestCreate(kCCDigestSHA1);
-        if (NULL != outHashSize)
-            *outHashSize = CC_SHA1_DIGEST_LENGTH;
-#ifdef XAR_SUPPORT_MD5
-    } else if (0 == strcasecmp(name, "md5")) {
-        result = CCDigestCreate(kCCDigestMD5);
-        if (NULL != outHashSize)
-            *outHashSize = CC_MD5_DIGEST_LENGTH;
-#endif // XAR_SUPPORT_MD5
-    }
-	
-    return result;
-}
-#endif // __APPLE__
-
 
 struct __xar_hash_t {
 	const char *digest_name;
 	void *context;
-#ifdef __APPLE__
-	CCDigestRef digest;
-#else
 	EVP_MD_CTX *digest;
 	const EVP_MD *type;
-#endif
 	unsigned int length;
 };
 
@@ -113,14 +72,10 @@
 	if( context )
 		HASH_CTX(hash)->context = context;
 	
-#ifdef __APPLE__
-	HASH_CTX(hash)->digest = digestRef_from_name(digest_name, &HASH_CTX(hash)->length);
-#else
 	OpenSSL_add_all_digests();
 	HASH_CTX(hash)->type = EVP_get_digestbyname(digest_name);
 	HASH_CTX(hash)->digest = EVP_MD_CTX_create();
 	EVP_DigestInit(HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
-#endif
 	
 	HASH_CTX(hash)->digest_name = strdup(digest_name);
 	
@@ -136,29 +91,16 @@
 }
 
 void xar_hash_update(xar_hash_t hash, void *buffer, size_t nbyte) {
-#ifdef __APPLE__
-	CCDigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
-#else
 	EVP_DigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
-#endif
 }
 
 void *xar_hash_finish(xar_hash_t hash, size_t *nbyte) {
-#ifdef __APPLE__
-	void *buffer = calloc(1, CC_SHA512_DIGEST_LENGTH); // current biggest digest size  This is what OpenSSL uses
-#else
 	void *buffer = calloc(1, EVP_MAX_MD_SIZE);
-#endif
 	if( ! buffer )
 		return NULL;
 	
-#ifdef __APPLE__
-	CCDigestFinal(HASH_CTX(hash)->digest, buffer);
-	CCDigestDestroy(HASH_CTX(hash)->digest);
-#else
 	EVP_DigestFinal(HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
 	EVP_MD_CTX_destroy(HASH_CTX(hash)->digest);
-#endif
 	
 	*nbyte = HASH_CTX(hash)->length;
 	free((void *)HASH_CTX(hash)->digest_name);
