--- joe/coreutils-8.32/src/copy.c	2020-01-01 06:13:12.000000000 -0800
+++ coreutils-8.32/src/copy.c	2021-09-01 19:16:35.000000000 -0700
@@ -73,6 +73,10 @@
 # include "verror.h"
 #endif
 
+#ifdef __APPLE__
+#include <sys/clonefile.h>
+#endif
+
 #if HAVE_LINUX_FALLOC_H
 # include <linux/falloc.h>
 #endif
@@ -369,6 +373,30 @@
 {
 #ifdef FICLONE
   return ioctl (dest_fd, FICLONE, src_fd);
+#elif defined __APPLE__
+  // This just emulates the ioctl, so that the interface is forwards compatible for later.
+  // This also assumes that dest_fd points to an empty file, and that src_fd exists.
+  struct stat dest_stat;
+  if (fstat(dest_fd, &dest_stat) == -1)
+      return -1;
+
+  char srcpath[PATH_MAX];
+  char destpath[PATH_MAX];
+  if (fcntl(src_fd, F_GETPATH, srcpath) == -1 || fcntl(dest_fd, F_GETPATH, destpath) == -1)
+      return -1;
+
+  // Unlink dest_fd, since clonefile(3) requires the destpath to not exist
+  unlink(destpath);
+  if (clonefile(srcpath, destpath, 0)) {
+      // If clonefile(3) fails, creat() a new file with the same path, 
+      // assign it the same mode as the original dest_fd, 
+      // and dup2 it to the original dest_fd as well, just 
+      // so that it appears dest_fd has not been changed.
+      creat(destpath, dest_stat.st_mode);
+  }
+
+  dup2(open(destpath, O_RDWR), dest_fd);
+  return 0;
 #else
   (void) dest_fd;
   (void) src_fd;
