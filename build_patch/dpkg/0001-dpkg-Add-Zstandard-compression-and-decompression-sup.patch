diff --color -urN dpkg-1.21.7/README dpkg-1.21.7/README
--- dpkg-1.21.7/README	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/README	2022-06-01 14:51:06.598462000 +0000
@@ -83,6 +83,7 @@
 
   libmd (used by libdpkg, currently falling back to embedded code)
   libz (from zlib, used instead of gzip command-line tool)
+  libzstd (from libzstd, used instead of zstd command-line tool)
   liblzma (from xz utils, used instead of xz command-line tool)
   libbz2 (from bzip2, used instead of bzip2 command-line tool)
   libselinux
diff --color -urN dpkg-1.21.7/configure.ac dpkg-1.21.7/configure.ac
--- dpkg-1.21.7/configure.ac	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/configure.ac	2022-06-01 14:52:32.215831000 +0000
@@ -72,7 +72,7 @@
   [zsh vendor completions directory [DATADIR/zsh/vendor-completions]])
 
 # Set default dpkg-deb values
-DPKG_DEB_COMPRESSOR([xz])
+DPKG_DEB_COMPRESSOR([zstd])
 
 # Checks for programs.
 AC_PROG_SED
@@ -95,6 +95,7 @@
 # Checks for libraries.
 DPKG_LIB_MD
 DPKG_LIB_Z
+DPKG_LIB_ZSTD
 DPKG_LIB_BZ2
 DPKG_LIB_LZMA
 DPKG_LIB_SELINUX
@@ -285,6 +286,7 @@
     libkvm  . . . . . . . . . . . : ${have_libkvm:-no}
     libselinux  . . . . . . . . . : $have_libselinux
     libmd . . . . . . . . . . . . : $have_libmd
+    libzstd  . . . . . . . . . .  : $have_libzstd
     libz  . . . . . . . . . . . . : $have_libz_impl
     liblzma . . . . . . . . . . . : $have_liblzma
     libbz2  . . . . . . . . . . . : $have_libbz2
diff --color -urN dpkg-1.21.7/debian/control dpkg-1.21.7/debian/control
--- dpkg-1.21.7/debian/control	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/debian/control	2022-06-01 14:53:15.413903000 +0000
@@ -16,7 +16,9 @@
 # Needed for --porefs defaults, conditional addenda and mode=eof.
  po4a (>= 0.59),
  zlib1g-dev,
+ zstd,
  libbz2-dev,
+ libzstd-dev,
  liblzma-dev,
  libselinux1-dev [linux-any],
  libncurses-dev (>= 6.1+20180210) | libncursesw5-dev,
diff --color -urN dpkg-1.21.7/debian/rules dpkg-1.21.7/debian/rules
--- dpkg-1.21.7/debian/rules	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/debian/rules	2022-06-01 14:54:05.977727000 +0000
@@ -52,6 +52,7 @@
 		--with-devlibdir=\$${prefix}/lib/$(DEB_HOST_MULTIARCH) \
 		--without-libmd \
 		--with-libz \
+		--with-libzstd \
 		--with-liblzma \
 		--with-libbz2 \
 		# EOL
@@ -80,3 +81,10 @@
 
 override_dh_bugfiles:
 	dh_bugfiles -A
+
+override_dh_builddeb:
+	# Make debootstrap life easier on non-Debian based systems by
+	# compressing dpkg.deb with xz instead of zstd.
+	dh_builddeb -pdpkg -- -Zxz
+	dh_builddeb -a -Ndpkg
+	dh_builddeb
diff --color -urN dpkg-1.21.7/lib/dpkg/Makefile.am dpkg-1.21.7/lib/dpkg/Makefile.am
--- dpkg-1.21.7/lib/dpkg/Makefile.am	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/lib/dpkg/Makefile.am	2022-06-01 14:54:21.665675000 +0000
@@ -43,6 +43,7 @@
 libdpkg_la_LIBADD += \
 	$(LIBINTL) \
 	$(Z_LIBS) \
+	$(ZSTD_LIBS) \
 	$(LZMA_LIBS) \
 	$(BZ2_LIBS) \
 	# EOL
diff --color -urN dpkg-1.21.7/lib/dpkg/compress.c dpkg-1.21.7/lib/dpkg/compress.c
--- dpkg-1.21.7/lib/dpkg/compress.c	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/lib/dpkg/compress.c	2022-06-01 15:04:01.335217000 +0000
@@ -36,6 +36,9 @@
 #if USE_LIBZ_IMPL != USE_LIBZ_IMPL_NONE
 #include <compat-zlib.h>
 #endif
+#ifdef WITH_LIBZSTD
+#include <zstd.h>
+#endif
 #ifdef WITH_LIBLZMA
 #include <lzma.h>
 #endif
@@ -52,6 +55,7 @@
 #include <dpkg/command.h>
 #include <dpkg/compress.h>
 #if USE_LIBZ_IMPL == USE_LIBZ_IMPL_NONE || \
+    !defined(WITH_LIBZSTD) || \
     !defined(WITH_LIBLZMA) || \
     !defined(WITH_LIBBZ2)
 #include <dpkg/subproc.h>
@@ -918,6 +922,161 @@
 };
 
 /*
+ * Zstd compressor.
+ */
+
+#define ZSTD	"zstd"
+
+#ifdef WITH_LIBZSTD
+
+static void
+decompress_zstd(struct compress_params *params, int fd_in, int fd_out,
+                const char *desc)
+{
+	size_t const buf_in_size = ZSTD_DStreamInSize();
+	void*  const buf_in = m_malloc(buf_in_size);
+	size_t const buf_out_size = ZSTD_DStreamOutSize();
+	void*  const buf_out = m_malloc(buf_out_size);
+	size_t init_result, just_read, to_read;
+	ZSTD_DStream* const dstream = ZSTD_createDStream();
+	if (dstream == NULL) {
+		ohshit(_("ZSTD_createDStream error creating stream"));
+	}
+
+	init_result = ZSTD_initDStream(dstream);
+	if (ZSTD_isError(init_result)) {
+		ohshit(_("ZSTD_initDStream error : %s"), ZSTD_getErrorName(init_result));
+	}
+
+	to_read = init_result;
+	while ((just_read = fd_read(fd_in, buf_in, to_read))) {
+		ZSTD_inBuffer input = { buf_in, just_read, 0 };
+		while (input.pos < input.size) {
+			size_t actualwrite;
+			ZSTD_outBuffer output = { buf_out, buf_out_size, 0 };
+			to_read = ZSTD_decompressStream(dstream, &output , &input);
+			if (ZSTD_isError(to_read)) {
+				ohshit(_("ZSTD_decompressStream error : %s \n"),
+				       ZSTD_getErrorName(to_read));
+			}
+			actualwrite = fd_write(fd_out, output.dst, output.pos);
+			if (actualwrite != output.pos) {
+				const char *errmsg = strerror(errno);
+				ohshite(_("%s: internal zstd write error: '%s'"), desc, errmsg);
+			}
+			/* possible next frame */
+			if (to_read == 0) {
+				init_result = ZSTD_initDStream(dstream);
+				if (ZSTD_isError(init_result)) {
+					ohshit(_("ZSTD_initDStream error : %s"), ZSTD_getErrorName(init_result));
+				}
+				to_read = init_result;
+			}
+		}
+	}
+
+	ZSTD_freeDStream(dstream);
+	free(buf_in);
+	free(buf_out);
+	if (close(fd_out))
+		ohshite(_("%s: internal zstd write error"), desc);
+}
+
+static void
+compress_zstd(struct compress_params *params, int fd_in, int fd_out,
+              const char *desc)
+{
+	size_t const buf_in_size = ZSTD_CStreamInSize();
+	void*  const buf_in = m_malloc(buf_in_size);
+	size_t const buf_out_size = ZSTD_CStreamOutSize();
+	void*  const buf_out = m_malloc(buf_out_size);
+	size_t init_result, end_res;
+	size_t just_read, to_read;
+	ZSTD_CStream* const cstream = ZSTD_createCStream();
+	if (cstream == NULL) {
+		ohshit(_("ZSTD_createCStream error"));
+	}
+	init_result = ZSTD_initCStream(cstream, params->level);
+	if (ZSTD_isError(init_result)) {
+		ohshit(_("ZSTD_initCStream error : %s"), ZSTD_getErrorName(init_result));
+	}
+	to_read = buf_in_size;
+	while ((just_read = fd_read(fd_in, buf_in, to_read))) {
+		ZSTD_inBuffer input = { buf_in, just_read, 0 };
+		while (input.pos < input.size) {
+			size_t actualwrite;
+			ZSTD_outBuffer output = { buf_out, buf_out_size, 0 };
+			to_read = ZSTD_compressStream(cstream, &output , &input);
+			if (ZSTD_isError(to_read)) {
+				ohshit(_("ZSTD_decompressStream error : %s \n"),
+				       ZSTD_getErrorName(to_read));
+			}
+			actualwrite = fd_write(fd_out, output.dst, output.pos);
+			if (actualwrite != output.pos) {
+				const char *errmsg = strerror(errno);
+				ohshite(_("%s: internal zstd write error: '%s'"),
+					desc, errmsg);
+			}
+		}
+	}
+	do {
+		size_t actualwrite;
+		ZSTD_outBuffer output = { buf_out, buf_out_size, 0 };
+		end_res = ZSTD_endStream(cstream, &output);
+		if (ZSTD_isError(end_res)) {
+			ohshit(_("ZSTD_endStream error : %s \n"),
+			       ZSTD_getErrorName(end_res));
+		}
+		actualwrite = fd_write(fd_out, output.dst, output.pos);
+		if (actualwrite != output.pos) {
+			const char *errmsg = strerror(errno);
+			ohshite(_("%s: internal zstd write error: '%s'"), desc,
+				errmsg);
+		}
+	} while (end_res > 0);
+
+	ZSTD_freeCStream(cstream);
+	free(buf_in);
+	free(buf_out);
+
+	/* ZSTD_endStream() already flushed the output buffers */
+	if (close(fd_out))
+		ohshite(_("%s: internal zstd write error"), desc);
+}
+
+#else
+static const char *env_zstd[] = {};
+
+static void
+decompress_zstd(struct compress_params *params, int fd_in, int fd_out,
+                const char *desc)
+{
+	fd_fd_filter(fd_in, fd_out, desc, env_zstd, ZSTD, "-dcq", NULL);
+}
+
+static void
+compress_zstd(struct compress_params *params, int fd_in, int fd_out,
+              const char *desc)
+{
+	char combuf[6];
+
+	snprintf(combuf, sizeof(combuf), "-c%d", params->level);
+	fd_fd_filter(fd_in, fd_out, desc, env_zstd, ZSTD, combuf, "-q", NULL);
+}
+#endif
+
+static const struct compressor compressor_zstd = {
+	.name = "zstd",
+	.extension = ".zst",
+          /* zstd commands's default is 3 but the aim is to be closer to xz's
+           * default compression efficiency */
+	.default_level = 19,
+	.fixup_params = fixup_none_params,
+	.compress = compress_zstd,
+	.decompress = decompress_zstd,
+};
+
+/*
  * Generic compressor filter.
  */
 
@@ -927,6 +1086,7 @@
 	[COMPRESSOR_TYPE_XZ] = &compressor_xz,
 	[COMPRESSOR_TYPE_BZIP2] = &compressor_bzip2,
 	[COMPRESSOR_TYPE_LZMA] = &compressor_lzma,
+	[COMPRESSOR_TYPE_ZSTD] = &compressor_zstd,
 };
 
 static const struct compressor *
diff --color -urN dpkg-1.21.7/lib/dpkg/compress.h dpkg-1.21.7ubuntu1/lib/dpkg/compress.h
--- dpkg-1.21.7/lib/dpkg/compress.h	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7ubuntu1/lib/dpkg/compress.h	2022-04-07 14:15:26.000000000 +0000
@@ -42,6 +42,7 @@
 	COMPRESSOR_TYPE_XZ,
 	COMPRESSOR_TYPE_BZIP2,
 	COMPRESSOR_TYPE_LZMA,
+	COMPRESSOR_TYPE_ZSTD,
 };
 
 enum compressor_strategy {
diff --color -urN dpkg-1.21.7/m4/dpkg-build.m4 dpkg-1.21.7/m4/dpkg-build.m4
--- dpkg-1.21.7/m4/dpkg-build.m4	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/m4/dpkg-build.m4	2022-06-01 15:04:19.092679000 +0000
@@ -78,7 +78,7 @@
       [change default dpkg-deb build compressor])],
     [with_dpkg_deb_compressor=$withval], [with_dpkg_deb_compressor=$1])
   AS_CASE([$with_dpkg_deb_compressor],
-    [gzip|xz], [:],
+    [gzip|xz|zstd], [:],
     [AC_MSG_ERROR([unsupported default compressor $with_dpkg_deb_compressor])])
   AC_DEFINE_UNQUOTED([DPKG_DEB_DEFAULT_COMPRESSOR],
     [COMPRESSOR_TYPE_]AS_TR_CPP(${with_dpkg_deb_compressor}),
diff --color -urN dpkg-1.21.7/m4/dpkg-libs.m4 dpkg-1.21.7/m4/dpkg-libs.m4
--- dpkg-1.21.7/m4/dpkg-libs.m4	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/m4/dpkg-libs.m4	2022-06-01 15:04:54.470736000 +0000
@@ -100,6 +100,13 @@
                      [Define to the zlib implementation to use])
 ])# DPKG_LIB_Z
 
+# DPKG_LIB_ZSTD
+# -------------
+# Check for zstd library.
+AC_DEFUN([DPKG_LIB_ZSTD], [
+  DPKG_WITH_COMPRESS_LIB([zstd], [zstd.h], [ZSTD_decompressStream])
+])# DPKG_LIB_ZSTD
+
 # DPKG_LIB_LZMA
 # -------------
 # Check for lzma library.
diff --color -urN dpkg-1.21.7/man/dpkg-deb.pod dpkg-1.21.7/man/dpkg-deb.pod
--- dpkg-1.21.7/man/dpkg-deb.pod	2022-03-26 17:17:58.000000000 +0000
+++ dpkg-1.21.7/man/dpkg-deb.pod	2022-06-01 15:10:51.402629000 +0000
@@ -254,7 +254,7 @@
 =item B<-z>I<compress-level>
 
 Specify which compression level to use on the compressor backend, when
-building a package (default is 9 for gzip, 6 for xz).
+building a package (default is 9 for gzip, 6 for xz and 19 for zstd).
 The accepted values are 0-9 with: 0 being mapped to compressor none for gzip.
 Before dpkg 1.16.2 level 0 was equivalent to compressor none for all
 compressors.
@@ -269,8 +269,8 @@
 =item B<-Z>I<compress-type>
 
 Specify which compression type to use when building a package.
-Allowed values are B<gzip>, B<xz> (since dpkg 1.15.6),
-and B<none> (default is B<xz>).
+Allowed values are B<gzip>, B<xz> (since dpkg 1.15.6), B<zstd>
+(since dpkg 1.20.0) and B<none> (default is B<zstd>).
 
 =item B<--[no-]uniform-compression>
 
@@ -278,8 +278,7 @@
 members (i.e. B<control.tar> and B<data.tar>; since dpkg 1.17.6).
 Otherwise only the
 B<data.tar> member will use those parameters. The only supported
-compression types allowed to be uniformly used are B<none>, B<gzip>
-and B<xz>.
+compression types allowed to be uniformly used are B<none>, B<gzip>, B<xz>, and B<zstd>.
 The B<--no-uniform-compression> option disables uniform compression
 (since dpkg 1.19.0).
 Uniform compression is the default (since dpkg 1.19.0).
diff --color -urN dpkg-1.21.7/src/Makefile.am dpkg-1.21.7/src/Makefile.am
--- dpkg-1.21.7/src/Makefile.am	2022-03-26 17:17:59.000000000 +0000
+++ dpkg-1.21.7/src/Makefile.am	2022-06-01 15:11:25.246506000 +0000
@@ -99,6 +99,7 @@
 dpkg_deb_LDADD = \
 	$(LDADD) \
 	$(Z_LIBS) \
+	$(ZSTD_LIBS) \
 	$(LZMA_LIBS) \
 	$(BZ2_LIBS) \
 	# EOL
--- dpkg-1.21.7/src/at/deb-format.at	2022-03-26 17:17:59.000000000 +0000
+++ dpkg-1.21.7ubuntu1/src/at/deb-format.at	2022-05-11 16:01:31.000000000 +0000
@@ -187,6 +187,7 @@
 xz -c data.tar >data.tar.xz
 bzip2 -c data.tar >data.tar.bz2
 lzma -c data.tar >data.tar.lzma
+pzstd -q -c data.tar >data.tar.zst
 touch _ignore
 touch unknown
 ])
@@ -471,6 +472,18 @@
 ], [], [debian-binary
 control.tar.gz
 data.tar.bz2
+drwxr-xr-x root/root         0 1970-01-01 00:00 ./
+-rw-r--r-- root/root         5 1970-01-01 00:00 ./file-templ
+])
+
+AT_CHECK([
+# Test data.tar.zst member
+ar rc pkg-data-zst.deb debian-binary control.tar.gz data.tar.zst
+ar t pkg-data-zst.deb
+dpkg-deb -c pkg-data-zst.deb
+], [], [debian-binary
+control.tar.gz
+data.tar.zst
 drwxr-xr-x root/root         0 1970-01-01 00:00 ./
 -rw-r--r-- root/root         5 1970-01-01 00:00 ./file-templ
 ])
diff --color -urN dpkg-1.21.7/src/deb/extract.c dpkg-1.21.7/src/deb/extract.c
--- dpkg-1.21.7/src/deb/extract.c	2022-03-26 17:17:59.000000000 +0000
+++ dpkg-1.21.7/src/deb/extract.c	2022-06-01 15:11:52.702366000 +0000
@@ -183,6 +183,7 @@
           decompress_params.type = compressor_find_by_extension(extension);
           if (decompress_params.type != COMPRESSOR_TYPE_NONE &&
               decompress_params.type != COMPRESSOR_TYPE_GZIP &&
+              decompress_params.type != COMPRESSOR_TYPE_ZSTD &&
               decompress_params.type != COMPRESSOR_TYPE_XZ)
             ohshit(_("archive '%s' uses unknown compression for member '%.*s', "
                      "giving up"),
diff --color -urN dpkg-1.21.7/src/deb/main.c dpkg-1.21.7/src/deb/main.c
--- dpkg-1.21.7/src/deb/main.c	2022-03-26 17:17:59.000000000 +0000
+++ dpkg-1.21.7/src/deb/main.c	2022-06-01 15:12:18.788425000 +0000
@@ -108,7 +108,7 @@
 "      --[no-]uniform-compression   Use the compression params on all members.\n"
 "  -z#                              Set the compression level when building.\n"
 "  -Z<type>                         Set the compression type used when building.\n"
-"                                     Allowed types: gzip, xz, none.\n"
+"                                     Allowed types: gzip, xz, zstd, none.\n"
 "  -S<strategy>                     Set the compression strategy when building.\n"
 "                                     Allowed values: none; extreme (xz);\n"
 "                                     filtered, huffman, rle, fixed (gzip).\n"
@@ -245,6 +245,7 @@
   if (opt_uniform_compression &&
       (compress_params.type != COMPRESSOR_TYPE_NONE &&
        compress_params.type != COMPRESSOR_TYPE_GZIP &&
+       compress_params.type != COMPRESSOR_TYPE_ZSTD &&
        compress_params.type != COMPRESSOR_TYPE_XZ))
     badusage(_("unsupported compression type '%s' with uniform compression"),
              compressor_get_name(compress_params.type));
