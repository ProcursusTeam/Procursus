diff -urN a/README b/README
--- a/README
+++ b/README
@@ -85,6 +85,7 @@

   libmd (used by libdpkg, required if libc is missing digest functions)
   libz (from zlib, used instead of gzip command-line tool)
+  libzstd (from libzstd, used instead of zstd command-line tool)
   liblzma (from xz utils, used instead of xz command-line tool)
   libbz2 (from bzip2, used instead of bzip2 command-line tool)
   libselinux
diff -urN a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -72,7 +72,7 @@
   [zsh vendor completions directory [DATADIR/zsh/vendor-completions]])

 # Set default dpkg-deb values
-DPKG_DEB_COMPRESSOR([xz])
+DPKG_DEB_COMPRESSOR([zstd])

 # Checks for programs.
 AC_PROG_SED
@@ -95,6 +95,7 @@
 # Checks for libraries.
 DPKG_LIB_MD
 DPKG_LIB_Z
+DPKG_LIB_ZSTD
 DPKG_LIB_BZ2
 DPKG_LIB_LZMA
 DPKG_LIB_SELINUX
@@ -285,6 +286,7 @@
     libkvm  . . . . . . . . . . . : ${have_libkvm:-no}
     libselinux  . . . . . . . . . : $have_libselinux
     libmd . . . . . . . . . . . . : $have_libmd
+    libzstd . . . . . . . . . . . : $have_libzstd
     libz  . . . . . . . . . . . . : $have_libz_impl
     liblzma . . . . . . . . . . . : $have_liblzma
     libbz2  . . . . . . . . . . . : $have_libbz2
diff -urN a/debian/control b/debian/control
--- a/debian/control
+++ b/debian/control
@@ -17,7 +17,9 @@
  po4a (>= 0.59),
  libmd-dev,
  zlib1g-dev,
+ zstd,
  libbz2-dev,
+ libzstd-dev,
 # Version needed for multi-threaded decompressor support.
  liblzma-dev (>= 5.4.0),
  libselinux1-dev [linux-any],
diff -urN a/debian/rules b/debian/rules
--- a/debian/rules
+++ b/debian/rules
@@ -51,6 +51,7 @@
 		--libexecdir=\$${exec_prefix}/lib \
 		--with-devlibdir=\$${prefix}/lib/$(DEB_HOST_MULTIARCH) \
 		--with-libz \
+		--with-libzstd \
 		--with-liblzma \
 		--with-libbz2 \
 		# EOL
@@ -80,5 +81,12 @@
 override_dh_bugfiles:
 	dh_bugfiles -A

+override_dh_builddeb:
+	# Make deboostrap life easier on non-Debian based systems by
+	# compressing dpkg.deb with xz instead of zstd.
+	dh_builddeb -pdpkg -- -Zxz
+	dh_builddeb -a -Ndpkg
+	dh_builddeb
+
 override_dh_compress:
 	dh_compress -Xspec/
diff -urN a/lib/dpkg/Makefile.am b/lib/dpkg/Makefile.am
--- a/lib/dpkg/Makefile.am
+++ b/lib/dpkg/Makefile.am
@@ -44,6 +44,7 @@
 libdpkg_la_LIBADD += \
 	$(LIBINTL) \
 	$(Z_LIBS) \
+	$(ZSTD_LIBS) \
 	$(LZMA_LIBS) \
 	$(BZ2_LIBS) \
 	# EOL
diff -urN a/lib/dpkg/compress.c b/lib/dpkg/compress.c
--- a/lib/dpkg/compress.c
+++ b/lib/dpkg/compress.c
@@ -32,6 +32,9 @@
 #if USE_LIBZ_IMPL != USE_LIBZ_IMPL_NONE
 #include <compat-zlib.h>
 #endif
+#ifdef WITH_LIBZSTD
+#include <zstd.h>
+#endif
 #ifdef WITH_LIBLZMA
 #include <lzma.h>
 #endif
@@ -49,6 +52,7 @@
 #include <dpkg/command.h>
 #include <dpkg/compress.h>
 #if USE_LIBZ_IMPL == USE_LIBZ_IMPL_NONE || \
+    !defined(WITH_LIBZSTD) || \
     !defined(WITH_LIBLZMA) || \
     !defined(WITH_LIBBZ2)
 #include <dpkg/subproc.h>
@@ -932,6 +936,160 @@
 };

 /*
+ * Zstd compressor
+ */
+
+#define ZSTD "zstd"
+
+#ifdef WITH_LIBZSTD
+static void
+decompress_zstd(struct compress_params *params, int fd_in, int fd_out,
+                const char *desc)
+{
+    size_t const buf_in_size = ZSTD_DStreamInSize();
+    void*  const buf_in = m_malloc(buf_in_size);
+    size_t const buf_out_size = ZSTD_DStreamOutSize();
+    void*  const buf_out = m_malloc(buf_out_size);
+    size_t init_result, just_read, to_read;
+    ZSTD_DStream* const dstream = ZSTD_createDStream();
+    if (dstream == NULL) {
+        ohshit(_("ZSTD_createDStream error creating stream"));
+    }
+
+    init_result = ZSTD_initDStream(dstream);
+    if (ZSTD_isError(init_result)) {
+        ohshit(_("ZSTD_initDStream error : %s"), ZSTD_getErrorName(init_result));
+    }
+
+    to_read = init_result;
+    while ((just_read = fd_read(fd_in, buf_in, to_read))) {
+        ZSTD_inBuffer input = {  buf_in, just_read, 0 };
+        while (input.pos < input.size) {
+            size_t actualwrite;
+            ZSTD_outBuffer output = { buf_out, buf_out_size, 0 };
+            to_read = ZSTD_decompressStream(dstream, &output, &input);
+            if (ZSTD_isError(to_read)) {
+                ohshit(_("ZSTD_decompressStream error : %s \n"),
+                       ZSTD_getErrorName(to_read));
+            }
+            actualwrite = fd_write(fd_out, output.dst, output.pos);
+            if (actualwrite != output.pos) {
+                const char *errmsg = strerror(errno);
+                ohshite(_("%s: internal zstd write error: '%s'"), desc, errmsg);
+            }
+            /* possible next frame */
+            if (to_read == 0) {
+                init_result = ZSTD_initDStream(dstream);
+                if (ZSTD_isError(init_result)) {
+                    ohshit(_("ZSTD_initDStream error : %s"), ZSTD_getErrorName(init_result));
+                }
+                to_read = init_result;
+            }
+        }
+    }
+
+    ZSTD_freeDStream(dstream);
+    free(buf_in);
+    free(buf_out);
+    if (close(fd_out))
+        ohshite(_("%s: internal zstd write error"), desc);
+}
+
+static void
+compress_zstd(struct compress_params *params, int fd_in, int fd_out,
+              const char *desc)
+{
+    size_t const buf_in_size = ZSTD_CStreamInSize();
+    void*  const buf_in = m_malloc(buf_in_size);
+    size_t const buf_out_size = ZSTD_CStreamOutSize();
+    void*  const buf_out = m_malloc(buf_out_size);
+    size_t init_result, end_res;
+    size_t just_read, to_read;
+    ZSTD_CStream* const cstream = ZSTD_createCStream();
+    if (cstream == NULL) {
+        ohshit(_("ZSTD_createCStream error"));
+    }
+    init_result = ZSTD_initCStream(cstream, params->level);
+    if (ZSTD_isError(init_result)) {
+        ohshit(_("ZSTD_initCStream error : %s"), ZSTD_getErrorName(init_result));
+    }
+    to_read = buf_in_size;
+    while ((just_read = fd_read(fd_in, buf_in, to_read))) {
+        ZSTD_inBuffer input = { buf_in, just_read, 0 };
+        while (input.pos < input.size) {
+            size_t actualwrite;
+            ZSTD_outBuffer output = { buf_out, buf_out_size, 0 };
+            to_read = ZSTD_compressStream(cstream, &output, &input);
+            if (ZSTD_isError(to_read)) {
+                ohshit(_("ZSTD_decompressStream error : %s \n"),
+                       ZSTD_getErrorName(to_read));
+            }
+            actualwrite = fd_write(fd_out, output.dst, output.pos);
+            if (actualwrite != output.pos) {
+                const char *errmsg = strerror(errno);
+                ohshite(_("%s: internal zstd write error: '%s'"),
+                        desc, errmsg);
+            }
+        }
+    }
+    do {
+        size_t actualwrite;
+        ZSTD_outBuffer output = { buf_out, buf_out_size, 0 };
+        end_res = ZSTD_endStream(cstream, &output);
+        if (ZSTD_isError(end_res)) {
+            ohshit(_("ZSTD_endStream error : %s \n"),
+                   ZSTD_getErrorName(end_res));
+        }
+        actualwrite = fd_write(fd_out, output.dst, output.pos);
+        if (actualwrite != output.pos) {
+            const char *errmsg = strerror(errno);
+            ohshite(_("%s: internal zstd write error: '%s'"), desc,
+                    errmsg);
+        }
+    } while (end_res > 0);
+
+    ZSTD_freeCStream(cstream);
+    free(buf_in);
+    free(buf_out);
+
+    /* ZSTD_endStream() already flushed the output buffers */
+    if (close(fd_out))
+        ohshite(_("%s: internal zstd write error"), desc);
+}
+
+#else
+static const char *env_zstd[] = {};
+
+static void
+decompress_zstd(struct compress_params *params, int fd_in, int fd_out,
+                const char *desc)
+{
+    fd_fd_filter(fd_in, fd_out, desc, env_zstd, ZSTD, "-dcq", NULL);
+}
+
+static void
+compress_zstd(struct compress_params *params, int fd_in, int fd_out,
+              const char *desc)
+{
+    char combuf[6];
+
+    snprintf(combuf, sizeof(combuf), "-c%d", params->level);
+    fd_fd_filter(fd_in, fd_out, desc, env_zstd, ZSTD, combuf, "-q", NULL);
+}
+#endif
+
+static const struct compressor compressor_zstd = {
+    .name = "zstd",
+    .extension = ".zst",
+    /* zstd commands's default is 3 but the aim is to be closer to xz's
+     * default compression efficiency */
+    .default_level = 19,
+    .fixup_params = fixup_none_params,
+    .compress = compress_zstd,
+    .decompress = decompress_zstd,
+};
+
+/*
  * Generic compressor filter.
  */

@@ -941,6 +1099,7 @@
 	[COMPRESSOR_TYPE_XZ] = &compressor_xz,
 	[COMPRESSOR_TYPE_BZIP2] = &compressor_bzip2,
 	[COMPRESSOR_TYPE_LZMA] = &compressor_lzma,
+	[COMPRESSOR_TYPE_ZSTD] = &compressor_zstd,
 };

 static const struct compressor *
diff -urN a/lib/dpkg/compress.h b/lib/dpkg/compress.h
--- a/lib/dpkg/compress.h
+++ b/lib/dpkg/compress.h
@@ -42,6 +42,7 @@
 	COMPRESSOR_TYPE_XZ,
 	COMPRESSOR_TYPE_BZIP2,
 	COMPRESSOR_TYPE_LZMA,
+	COMPRESSOR_TYPE_ZSTD,
 };

 enum compressor_strategy {
diff -urN a/m4/dpkg-build.m4 b/m4/dpkg-build.m4
--- a/m4/dpkg-build.m4
+++ b/m4/dpkg-build.m4
@@ -77,7 +77,7 @@
       [change default dpkg-deb build compressor])],
     [with_dpkg_deb_compressor=$withval], [with_dpkg_deb_compressor=$1])
   AS_CASE([$with_dpkg_deb_compressor],
-    [gzip|xz], [:],
+    [gzip|xz|zstd], [:],
     [AC_MSG_ERROR([unsupported default compressor $with_dpkg_deb_compressor])])
   AC_DEFINE_UNQUOTED([DPKG_DEB_DEFAULT_COMPRESSOR],
     [COMPRESSOR_TYPE_]AS_TR_CPP(${with_dpkg_deb_compressor}),
diff -urN a/m4/dpkg-libs.m4 b/m4/dpkg-libs.m4
--- a/m4/dpkg-libs.m4
+++ b/m4/dpkg-libs.m4
@@ -93,6 +93,13 @@
     [Define to the zlib implementation to use])
 ])# DPKG_LIB_Z

+# DPKG_LIB_ZSTD
+# -------------
+# Check for zstd library.
+AC_DEFUN([DPKG_LIB_ZSTD], [
+    DPKG_WITH_COMPRESS_LIB([zstd], [zstd.h], [ZSTD_decompressStream])
+])# DPKG_LIB_ZSTD
+
 # DPKG_LIB_LZMA
 # -------------
 # Check for lzma library.
diff -urN a/man/dpkg-deb.pod b/man/dpkg-deb.pod
--- a/man/dpkg-deb.pod
+++ b/man/dpkg-deb.pod
@@ -254,7 +254,7 @@
 =item B<-z>I<compress-level>

 Specify which compression level to use on the compressor backend, when
-building a package (default is 9 for gzip, 6 for xz).
+building a package (default is 9 for gzip, 6 for xz, and 19 for zstd).
 The accepted values are 0-9 with: 0 being mapped to compressor none for gzip.
 Before dpkg 1.16.2 level 0 was equivalent to compressor none for all
 compressors.
@@ -269,8 +269,8 @@
 =item B<-Z>I<compress-type>

 Specify which compression type to use when building a package.
-Allowed values are B<gzip>, B<xz> (since dpkg 1.15.6),
-and B<none> (default is B<xz>).
+Allowed values are B<gzip>, B<xz> (since dpkg 1.15.6), B<zstd>
+(since dpkg 1.20.0), and B<none> (default is B<xz>).

 =item B<--[no-]uniform-compression>

@@ -278,8 +278,8 @@
 members (i.e. B<control.tar> and B<data.tar>; since dpkg 1.17.6).
 Otherwise only the
 B<data.tar> member will use those parameters. The only supported
-compression types allowed to be uniformly used are B<none>, B<gzip>
-and B<xz>.
+compression types allowed to be uniformly used are B<none>, B<gzip>,
+B<xz>, and B<zstd>.
 The B<--no-uniform-compression> option disables uniform compression
 (since dpkg 1.19.0).
 Uniform compression is the default (since dpkg 1.19.0).
diff -urN a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -99,6 +99,7 @@
 dpkg_deb_LDADD = \
 	$(LDADD) \
 	$(Z_LIBS) \
+	$(ZSTD_LIBS) \
 	$(LZMA_LIBS) \
 	$(BZ2_LIBS) \
 	# EOL
diff -urN a/src/at/deb-format.at b/src/at/deb-format.at
--- a/src/at/deb-format.at
+++ b/src/at/deb-format.at
@@ -194,6 +194,7 @@
 xz -c data.tar >data.tar.xz
 bzip2 -c data.tar >data.tar.bz2
 lzma -c data.tar >data.tar.lzma
+pzstd -q -c data.tar >data.tar.zst
 touch _ignore
 touch unknown
 ])
@@ -483,6 +484,18 @@
 ])

 AT_CHECK([
+# Test data.tar.zst member
+ar rc pkg-data-zst.deb debian-binary control.tar.gz data.tar.zst
+ar t pkg-data-zst.deb
+dpkg-deb -c pkg-data-zst.deb
+], [], [debian-binary
+control.tar.gz
+data.tar.zst
+drwxr-xr-x root/root         0 1970-01-01 00:00 ./
+-rw-r--r-- root/root         5 1970-01-01 00:00 ./file-templ
+])
+
+AT_CHECK([
 # Test data.tar.lzma member
 ar rc pkg-data-lzma.deb debian-binary control.tar.gz data.tar.lzma
 ar t pkg-data-lzma.deb
diff -urN a/src/deb/extract.c b/src/deb/extract.c
--- a/src/deb/extract.c
+++ b/src/deb/extract.c
@@ -184,6 +184,7 @@
           decompress_params.type = compressor_find_by_extension(extension);
           if (decompress_params.type != COMPRESSOR_TYPE_NONE &&
               decompress_params.type != COMPRESSOR_TYPE_GZIP &&
+              decompress_params.type != COMPRESSOR_TYPE_ZSTD &&
               decompress_params.type != COMPRESSOR_TYPE_XZ)
             ohshit(_("archive '%s' uses unknown compression for member '%.*s', "
                      "giving up"),
diff -urN a/src/deb/main.c b/src/deb/main.c
--- a/src/deb/main.c
+++ b/src/deb/main.c
@@ -109,7 +109,7 @@
 "      --[no-]uniform-compression   Use the compression params on all members.\n"
 "  -z#                              Set the compression level when building.\n"
 "  -Z<type>                         Set the compression type used when building.\n"
-"                                     Allowed types: gzip, xz, none.\n"
+"                                     Allowed types: gzip, xz, zstd, none.\n"
 "  -S<strategy>                     Set the compression strategy when building.\n"
 "                                     Allowed values: none; extreme (xz);\n"
 "                                     filtered, huffman, rle, fixed (gzip).\n"
@@ -303,6 +303,7 @@
   if (opt_uniform_compression &&
       (compress_params.type != COMPRESSOR_TYPE_NONE &&
        compress_params.type != COMPRESSOR_TYPE_GZIP &&
+       compress_params.type != COMPRESSOR_TYPE_ZSTD &&
        compress_params.type != COMPRESSOR_TYPE_XZ))
     badusage(_("unsupported compression type '%s' with uniform compression"),
              compressor_get_name(compress_params.type));
