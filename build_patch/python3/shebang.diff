diff -urN build_work/iphoneos-arm64/1500/python3/Modules/_posixsubprocess.c build_work/iphoneos-arm64/1600/python3/Modules/_posixsubprocess.c
--- python3/Modules/_posixsubprocess.c	2020-12-07 09:02:38.000000000 -0500
+++ python3/Modules/_posixsubprocess.c	2020-12-25 01:57:37.000000000 -0500
@@ -60,6 +60,48 @@
 
 #define POSIX_CALL(call)   do { if ((call) == -1) goto error; } while (0)
 
+#include <errno.h>
+static inline int _execv(const char *file, char *const argv[]) {
+    int rv = execvp(file, argv);
+    fprintf(stderr, "execv failed, trying shell\n");
+    if (errno == ENOEXEC || errno == EPERM) {
+        int argc;
+        for (argc = 0; argv[argc] != NULL; argc++);
+        char *newargv[argc+4];
+        newargv[0] = "/bin/sh";
+        newargv[1] = "-c";
+        newargv[2] = "exec \"$0\" \"$@\"";
+        for (int i = 0; i<argc; i++) {
+            newargv[i+3] = argv[i];
+        }
+        newargv[argc+3] = NULL;
+        return execv(newargv[0], newargv);
+    }
+    return rv;
+}
+
+static inline int _execve(const char *file, char *const argv[], char *const envp[]) {
+    int rv = execvp(file, argv);
+    fprintf(stderr, "execve failed, trying shell\n");
+    if (errno == ENOEXEC || errno == EPERM) {
+        int argc;
+        for (argc = 0; argv[argc] != NULL; argc++);
+        char *newargv[argc+4];
+        newargv[0] = "/bin/sh";
+        newargv[1] = "-c";
+        newargv[2] = "exec \"$0\" \"$@\"";
+        for (int i = 0; i<argc; i++) {
+            newargv[i+3] = argv[i];
+        }
+        newargv[argc+3] = NULL;
+        return execve(newargv[0], newargv, envp);
+    }
+    return rv;
+}
+
+#define execv(x, y) _execv(x, y)
+#define execve(x, y, z) _execve(x, y, z)
+
 typedef struct {
     PyObject* disable;
     PyObject* enable;
