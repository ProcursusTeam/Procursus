diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index eb15808..29cd437 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -46,6 +46,10 @@ check_symbol_exists(timerfd_create "sys/timerfd.h" HAVE_TIMERFD)
 
 check_symbol_exists(kqueue1 "sys/event.h" HAVE_KQUEUE1)
 add_compat_target(kqueue1 "NOT;HAVE_KQUEUE1")
+check_symbol_exists(ppoll "sys/poll.h" HAVE_PPOLL)
+add_compat_target(ppoll "NOT;HAVE_PPOLL")
+check_symbol_exists(sigtimedwait "sys/signal.h" HAVE_SIGTIMEDWAIT)
+add_compat_target(sigtimedwait "NOT;HAVE_SIGTIMEDWAIT")
 check_symbol_exists(sigandset "signal.h" HAVE_SIGANDSET)
 check_symbol_exists(sigorset "signal.h" HAVE_SIGORSET)
 check_symbol_exists(sigisemptyset "signal.h" HAVE_SIGISEMPTYSET)
@@ -98,6 +102,8 @@ target_link_libraries(
           $<BUILD_INTERFACE:evfilt_timer_quirks>
           $<BUILD_INTERFACE:compat_enable_kqueue1>
           $<BUILD_INTERFACE:compat_enable_sigops>
+          $<BUILD_INTERFACE:compat_enable_ppoll>
+          $<BUILD_INTERFACE:compat_enable_sigtimedwait>
           $<BUILD_INTERFACE:rwlock>)
 if(HAVE_TIMERFD)
   target_compile_definitions(epoll-shim PRIVATE HAVE_TIMERFD)
diff --git a/src/compat_ppoll.c b/src/compat_ppoll.c
new file mode 100644
index 0000000..6c90e06
--- /dev/null
+++ b/src/compat_ppoll.c
@@ -0,0 +1,47 @@
+#include "compat_ppoll.h"
+
+#include <sys/types.h>
+#if USE_PTHREAD
+# include <pthread.h> // sigprocmask is not thread-safe
+#endif
+
+#if defined(__APPLE__)
+int compat_ppoll (struct pollfd *restrict fds, int n,
+           const struct timespec *restrict ts,
+           const sigset_t *restrict sigset)
+{
+	sigset_t origset;
+	int timeout;
+	int val;
+
+	if (ts != NULL)
+		timeout = (ts->tv_sec * 1000) + (ts->tv_nsec / 1000000);
+	else
+		timeout = -1;
+
+	/* NOTE: ppoll() was introduced to fix the race condition between
+	 * sigprocmask()/pthread_sigmask() and poll(). This replacement
+	 * obviously reintroduces it. A more intricate implementation could
+	 * avoid this bug (at a high performance cost).
+	 */
+#if USE_PTHREAD
+	val = pthread_sigmask (SIG_SETMASK, sigset, &origset);
+	if (val)
+	{
+		errno = val;
+		return -1;
+	}
+#else
+	sigprocmask (SIG_SETMASK, sigset, &origset);
+#endif
+
+	val = poll (fds, n, timeout);
+
+#if USE_PTHREAD
+	pthread_sigmask (SIG_SETMASK, &origset, NULL); /* cannot fail */
+#else
+	sigprocmask (SIG_SETMASK, &origset, NULL); /* cannot fail */
+#endif
+	return val;
+}
+#endif
diff --git a/src/compat_ppoll.h b/src/compat_ppoll.h
new file mode 100644
index 0000000..0f8eea5
--- /dev/null
+++ b/src/compat_ppoll.h
@@ -0,0 +1,12 @@
+#ifndef COMPAT_PPOLL_H
+#define COMPAT_PPOLL_H
+
+#include <time.h>
+#include <signal.h>
+#include <poll.h>
+
+int compat_ppoll (struct pollfd *restrict fds, int n,
+           const struct timespec *restrict ts,
+           const sigset_t *restrict sigset);
+
+#endif
diff --git a/src/compat_sigops.c b/src/compat_sigops.c
index 1b2516d..a846628 100644
--- a/src/compat_sigops.c
+++ b/src/compat_sigops.c
@@ -2,7 +2,7 @@
 
 #include <string.h>
 
-#ifdef __OpenBSD__
+#if defined(__OpenBSD__) || defined(__APPLE__)
 int
 compat_sigisemptyset(sigset_t const *set)
 {
diff --git a/src/compat_sigtimedwait.c b/src/compat_sigtimedwait.c
new file mode 100644
index 0000000..8197e5d
--- /dev/null
+++ b/src/compat_sigtimedwait.c
@@ -0,0 +1,38 @@
+#include "compat_sigtimedwait.h"
+
+#include <string.h>
+#include <sys/errno.h>
+
+#if defined(__APPLE__)
+int compat_sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout) {
+	struct timespec elapsed = { 0, 0 }, rem;
+	sigset_t pending;
+	int signo;
+	long ns;
+
+	do {
+		sigpending(&pending); /* doesn't clear pending queue */
+
+		for (signo = 1; signo < NSIG; signo++) {
+			if (sigismember(set, signo) && sigismember(&pending, signo)) {
+				if (info) {
+					memset(info, 0, sizeof *info);
+					info->si_signo = signo;
+				}
+
+				return signo;
+			}
+		}
+
+		ns = 200000000L; /* 2/10th second */
+		nanosleep(&(struct timespec){ 0, ns }, &rem);
+		ns -= rem.tv_nsec;
+		elapsed.tv_sec += (elapsed.tv_nsec + ns) / 1000000000L;
+		elapsed.tv_nsec = (elapsed.tv_nsec + ns) % 1000000000L;
+	} while (elapsed.tv_sec < timeout->tv_sec || (elapsed.tv_sec == timeout->tv_sec && elapsed.tv_nsec < timeout->tv_nsec));
+
+	errno = EAGAIN;
+
+	return -1;
+}
+#endif
diff --git a/src/compat_sigtimedwait.h b/src/compat_sigtimedwait.h
new file mode 100644
index 0000000..c19c1ae
--- /dev/null
+++ b/src/compat_sigtimedwait.h
@@ -0,0 +1,13 @@
+#ifndef COMPAT_SIGTIMEDWAIT_H
+#define COMPAT_SIGTIMEDWAIT_H
+
+#include <time.h>
+#include <signal.h>
+
+int compat_sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
+
+#ifdef COMPAT_ENABLE_SIGTIMEDWAIT
+#define sigtimedwait compat_sigtimedwait
+#endif
+
+#endif
diff --git a/src/signalfd_ctx.c b/src/signalfd_ctx.c
index f9635a8..52d53a5 100644
--- a/src/signalfd_ctx.c
+++ b/src/signalfd_ctx.c
@@ -234,7 +234,7 @@ signalfd_ctx_read_impl(SignalFDCtx *signalfd,
 
 	signalfd_siginfo->ssi_status = siginfo.si_status;
 
-#ifndef __OpenBSD__
+#if !defined(__OpenBSD__) && !defined(__APPLE__)
 	signalfd_siginfo->ssi_band = (uint32_t)siginfo.si_band;
 #endif
 
diff --git a/src/timerfd_ctx.h b/src/timerfd_ctx.h
index 992619b..13ad15f 100644
--- a/src/timerfd_ctx.h
+++ b/src/timerfd_ctx.h
@@ -16,6 +16,13 @@ typedef enum {
 	TIMER_TYPE_ABSOLUTE,
 } TimerType;
 
+#ifndef __ITIMERSPEC
+#define __ITIMERSPEC struct itimerspec
+__ITIMERSPEC {
+	struct timespec  it_interval;
+	struct timespec  it_value;
+};
+#endif
 typedef struct {
 	bool is_abstime;
 
diff --git a/src/timespec_util.h b/src/timespec_util.h
index 10e40ab..aae157a 100644
--- a/src/timespec_util.h
+++ b/src/timespec_util.h
@@ -6,7 +6,13 @@
 #include <stdlib.h>
 
 #include <time.h>
-
+#ifndef __ITIMERSPEC
+#define __ITIMERSPEC struct itimerspec
+__ITIMERSPEC {
+	struct timespec  it_interval;
+	struct timespec  it_value;
+};
+#endif
 // TODO(jan): Remove this once the definition is exposed in <sys/time.h> in
 // all supported FreeBSD versions.
 #ifndef timespeccmp
diff --git a/src/wrap.c b/src/wrap.c
index 760dea7..a3deaf1 100644
--- a/src/wrap.c
+++ b/src/wrap.c
@@ -20,6 +20,8 @@ static struct {
 	typeof(poll) *real_poll;
 #ifdef __NetBSD__
 	typeof(pollts) *real___pollts50;
+#elif COMPAT_ENABLE_PPOLL
+	typeof(compat_ppoll) *real_ppoll;
 #else
 	typeof(ppoll) *real_ppoll;
 #endif
diff --git a/include/sys/timerfd.h b/include/sys/timerfd.h
index 504c4bc..72f8002 100644
--- a/include/sys/timerfd.h
+++ b/include/sys/timerfd.h
@@ -14,7 +14,18 @@ extern "C" {
 #define TFD_TIMER_ABSTIME 1
 #define TFD_TIMER_CANCEL_ON_SET (1 << 1)
 
+#ifdef __APPLE__
+// Darwin's <time.h> does not have itimerspec
+#ifndef __ITIMERSPEC
+#define __ITIMERSPEC struct itimerspec
+__ITIMERSPEC {
+	struct timespec it_interval;
+	struct timespec it_value;
+};
+#endif
+#else
 struct itimerspec;
+#endif
 
 int timerfd_create(int, int);
 int timerfd_settime(int, int, struct itimerspec const *, struct itimerspec *);
