diff -urN openjdk/src/hotspot/os_cpu/bsd_aarch64/os_bsd_aarch64.cpp.orig openjdk/src/hotspot/os_cpu/bsd_aarch64/os_bsd_aarch64.cpp
--- openjdk/src/hotspot/os_cpu/bsd_aarch64/os_bsd_aarch64.cpp	2020-12-27 17:52:28.000000000 -0500
+++ openjdk/src/hotspot/os_cpu/bsd_aarch64/os_bsd_aarch64.cpp	2020-12-27 19:00:38.000000000 -0500
@@ -87,6 +87,7 @@
 # include <errno.h>
 # include <sys/types.h>
 # include <sys/sysctl.h>
+# include "tcg-apple-jit.h"
 # define DEFAULT_MAIN_THREAD_STACK_PAGES 2048
 # define OS_X_10_9_0_KERNEL_MAJOR_VERSION 13
 #endif
@@ -124,6 +125,11 @@
 #endif
 }
 
+extern "C" {
+  static void tb_exec_change(bool locked);
+}
+
+
 char* os::non_memory_address_word() {
   // Must never look like an address returned by reserve_memory,
   // even in its subfields (as defined by the CPU immediate fields,
@@ -362,7 +368,8 @@
 
     if (pc != addr && uc->context_esr == 0x9200004F) { //TODO: figure out what this value means
       // We are faulting trying to write a R-X page
-      pthread_jit_write_protect_np(false);
+      //pthread_jit_write_protect_np(false);
+        tb_exec_change(false);
 
       log_debug(os)("Writing protection violation "
                     "at " INTPTR_FORMAT
@@ -375,7 +382,8 @@
       // We are faulting trying to execute a RW- page
 
       if (addr != last_addr) {
-        pthread_jit_write_protect_np(true);
+        //pthread_jit_write_protect_np(true);
+          tb_exec_change(true);
 
         log_debug(os)("Execution protection violation "
                       "at " INTPTR_FORMAT
@@ -662,7 +670,8 @@
 }
 
 void os::current_thread_enable_wx_impl(WXMode mode) {
-  pthread_jit_write_protect_np(mode == WXExec);
+  //pthread_jit_write_protect_np(mode == WXExec);
+    tb_exec_change(mode == WXExec);
 }
 
 extern "C" {
@@ -733,4 +742,26 @@
                                      size_t    count) {
     memmove(to, from, count * 8);
   }
+
+#if defined(__APPLE__)
+static void tb_exec_change(bool locked)
+{
+     if (jit_write_protect_supported()) {
+         jit_write_protect(locked);
+     }
+ }
+ #else /* not needed on non-Darwin platforms */
+ static void tb_exec_change(bool locked) {}
+ #endif
+
+ void tb_exec_lock(void)
+ {
+     /* assumes sys_icache_invalidate already called */
+     tb_exec_change(true);
+ }
+
+ void tb_exec_unlock(void)
+ {
+     tb_exec_change(false);
+ }
 };
diff -urN openjdk/src/hotspot/os_cpu/bsd_aarch64/tcg-apple-jit openjdk/src/hotspot/os_cpu/bsd_aarch64/tcg-apple-jit.h 
--- openjdk/src/hotspot/os_cpu/bsd_aarch64/tcg-apple-jit.h	1969-12-31 19:00:00.000000000 -0500
+++ openjdk/src/hotspot/os_cpu/bsd_aarch64/tcg-apple-jit.h	2020-12-27 18:48:06.000000000 -0500
@@ -0,0 +1,86 @@
+/*
+ * Apple Silicon functions for JIT handling
+ *
+ * Copyright (c) 2020 osy
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef TCG_APPLE_JIT_H
+#define TCG_APPLE_JIT_H
+
+/*
+ * APRR handling
+ * Credits to: https://siguza.github.io/APRR/
+ * Reversed from /usr/lib/system/libsystem_pthread.dylib
+ */
+
+#if defined(__aarch64__) && defined(__APPLE__)
+
+#define _COMM_PAGE_START_ADDRESS        (0x0000000FFFFFC000ULL) /* In TTBR0 */
+#define _COMM_PAGE_APRR_SUPPORT         (_COMM_PAGE_START_ADDRESS + 0x10C)
+#define _COMM_PAGE_APPR_WRITE_ENABLE    (_COMM_PAGE_START_ADDRESS + 0x110)
+#define _COMM_PAGE_APRR_WRITE_DISABLE   (_COMM_PAGE_START_ADDRESS + 0x118)
+
+static __attribute__((__always_inline__)) bool jit_write_protect_supported(void)
+{
+    /* Access shared kernel page at fixed memory location. */
+    uint8_t aprr_support = *(volatile uint8_t *)_COMM_PAGE_APRR_SUPPORT;
+    return aprr_support > 0;
+}
+
+/* write protect enable = write disable */
+static __attribute__((__always_inline__)) void jit_write_protect(int enabled)
+{
+    /* Access shared kernel page at fixed memory location. */
+    uint8_t aprr_support = *(volatile uint8_t *)_COMM_PAGE_APRR_SUPPORT;
+    if (aprr_support == 0 || aprr_support > 3) {
+        return;
+    } else if (aprr_support == 1) {
+        __asm__ __volatile__ (
+            "mov x0, %0\n"
+            "ldr x0, [x0]\n"
+            "msr S3_4_c15_c2_7, x0\n"
+            "isb sy\n"
+            :: "r" (enabled ? _COMM_PAGE_APRR_WRITE_DISABLE
+                            : _COMM_PAGE_APPR_WRITE_ENABLE)
+            : "memory", "x0"
+        );
+    } else {
+        __asm__ __volatile__ (
+            "mov x0, %0\n"
+            "ldr x0, [x0]\n"
+            "msr S3_6_c15_c1_5, x0\n"
+            "isb sy\n"
+            :: "r" (enabled ? _COMM_PAGE_APRR_WRITE_DISABLE
+                            : _COMM_PAGE_APPR_WRITE_ENABLE)
+            : "memory", "x0"
+        );
+    }
+}
+
+#else /* defined(__aarch64__) && defined(__APPLE__) */
+
+static __attribute__((__always_inline__)) bool jit_write_protect_supported(void)
+{
+    return false;
+}
+
+static __attribute__((__always_inline__)) void jit_write_protect(int enabled)
+{
+}
+
+#endif
+
+#endif /* define TCG_APPLE_JIT_H */
\ No newline at end of file
