diff --git a/src/arm64.c b/src/arm64.c
index 2b07da0..99420f5 100644
--- a/src/arm64.c
+++ b/src/arm64.c
@@ -442,6 +442,90 @@ int arm64_dec_add_imm(uint32_t inst, arm64_register *destinationRegOut, arm64_re
     return 0;
 }
 
+int arm64_gen_sub_imm(arm64_register destinationReg, arm64_register sourceReg, optional_uint64_t optImm, optional_bool optS, uint32_t *bytesOut, uint32_t *maskOut) {
+  if (ARM64_REG_IS_ANY_VECTOR(destinationReg)) return -1;
+  if (ARM64_REG_IS_ANY_VECTOR(sourceReg)) return -1;
+
+  if (!ARM64_REG_IS_ANY(destinationReg) && !ARM64_REG_IS_ANY(sourceReg)) {
+    // if both regs are set and have a mismatching width, abort
+    if (ARM64_REG_IS_W(destinationReg) != ARM64_REG_IS_W(sourceReg)) return -1;
+  }
+
+  uint32_t inst = 0x51000000;
+  uint32_t mask = 0x7f800000;
+  if(OPT_BOOL_IS_SET(optS)) {
+    bool s = OPT_BOOL_GET_VAL(optS);
+    if(s) {
+      inst = 0x71000000;
+      mask |= (1 << 29);
+      inst |= (1 << 29);
+    }
+  }
+
+  // if one is set and 32 bit, include 32 bit in mask and set it in inst
+  if (!ARM64_REG_IS_ANY(destinationReg)) {
+    mask |= (1 << 31);
+    inst |= ((uint32_t)(ARM64_REG_IS_X(destinationReg)) << 31);
+  }
+  else if (!ARM64_REG_IS_ANY(sourceReg)) {
+    mask |= (1 << 31);
+    inst |= ((uint32_t)(ARM64_REG_IS_X(sourceReg)) << 31);
+  }
+
+  if (!ARM64_REG_IS_ANY(destinationReg)) {
+    mask |= 0x1F;
+    inst |= (uint32_t)(ARM64_REG_GET_NUM(destinationReg));
+  }
+  if (!ARM64_REG_IS_ANY(sourceReg)) {
+    mask |= (0x1F << 5);
+    inst |= ((uint32_t)(ARM64_REG_GET_NUM(destinationReg)) << 5);
+  }
+
+  if (OPT_UINT64_IS_SET(optImm)) {
+    uint64_t imm = OPT_UINT64_GET_VAL(optImm);
+    if (imm & ~0xFFF) return -1;
+    mask |= (0xFFF << 10);
+    inst |= (imm << 10);
+  }
+
+  if (bytesOut) *bytesOut = inst;
+  if (maskOut) *maskOut = mask;
+  return 0;
+}
+
+int arm64_dec_sub_imm(uint32_t inst, arm64_register *destinationRegOut, arm64_register *sourceRegOut, uint16_t *immOut, bool *sOut) {
+  if ((inst & 0x7f800000) != 0x51000000) {
+    if ((inst & 0x7f800000) != 0x71000000) {
+      return -1;
+    }
+  }
+  bool is64 = (inst & 0x80000000);
+  bool isS = (inst & 0x20000000);
+  bool shift = (inst & 0x400000);
+
+  if (destinationRegOut) {
+    *destinationRegOut = ARM64_REG(is64 ? ARM64_REG_TYPE_X : ARM64_REG_TYPE_W, inst & 0x1F);
+  }
+  if (sourceRegOut) {
+    *sourceRegOut = ARM64_REG(is64 ? ARM64_REG_TYPE_X : ARM64_REG_TYPE_W, (inst >> 5) & 0x1F);
+  }
+
+  if (immOut) {
+    uint16_t imm = ((inst >> 10) & 0xFFF);
+    if (shift) {
+      imm = (imm << 12);
+    }
+    *immOut = imm;
+  }
+
+  if (sOut) {
+    *sOut = isS;
+  }
+
+  return 0;
+}
+
+
 static int _arm64_gen_str_ldr_imm(uint32_t inst, uint32_t mask, char type, arm64_ldr_str_type instType, arm64_register sourceDestinationReg, arm64_register addrReg, optional_uint64_t optImm, uint32_t *bytesOut, uint32_t *maskOut)
 {
     if (ARM64_REG_IS_ANY_VECTOR(addrReg)) return -1;
diff --git a/src/arm64.h b/src/arm64.h
index 6cc1329..5ad903b 100644
--- a/src/arm64.h
+++ b/src/arm64.h
@@ -85,6 +85,8 @@ int arm64_gen_mov_reg(arm64_register destinationReg, arm64_register sourceReg, u
 int arm64_dec_mov_reg(uint32_t inst, arm64_register *destinationRegOut, arm64_register *sourceRegOut);
 int arm64_gen_add_imm(arm64_register destinationReg, arm64_register sourceReg, optional_uint64_t optImm, uint32_t *bytesOut, uint32_t *maskOut);
 int arm64_dec_add_imm(uint32_t inst, arm64_register *destinationRegOut, arm64_register *sourceRegOut, uint16_t *immOut);
+int arm64_gen_sub_imm(arm64_register destinationReg, arm64_register sourceReg, optional_uint64_t optImm, optional_bool optS, uint32_t *bytesOut, uint32_t *maskOut);
+int arm64_dec_sub_imm(uint32_t inst, arm64_register *destinationRegOut, arm64_register *sourceRegOut, uint16_t *immOut, bool *sOut);
 int arm64_gen_ldr_imm(char type, arm64_ldr_str_type instType, arm64_register destinationReg, arm64_register addrReg, optional_uint64_t optImm, uint32_t *bytesOut, uint32_t *maskOut);
 int arm64_dec_ldr_imm(uint32_t inst, arm64_register *destinationReg, arm64_register *addrReg, uint64_t *immOut, char *typeOut, arm64_ldr_str_type *instTypeOut);
 int arm64_gen_ldrs_imm(char type, arm64_ldr_str_type instType, arm64_register destinationReg, arm64_register addrReg, optional_uint64_t optImm, uint32_t *bytesOut, uint32_t *maskOut);

diff --git a/src/MachOByteOrder.h b/src/MachOByteOrder.h
index 47f6f7d..56e28ea 100644
--- a/src/MachOByteOrder.h
+++ b/src/MachOByteOrder.h
@@ -3,6 +3,7 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <libkern/OSByteOrder.h>
 
 // 8-bit integers needed for CodeDirectory
 #define BIG_TO_HOST(n) _Generic((n), \
