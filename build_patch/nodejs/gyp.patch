diff -ruN node-v14.13.0/tools/gyp/pylib/gyp/common.py nodejs/tools/gyp/pylib/gyp/common.py
--- node-v14.13.0/tools/gyp/pylib/gyp/common.py	2020-09-30 01:58:15.000000000 +0900
+++ nodejs/tools/gyp/pylib/gyp/common.py	2020-10-07 10:57:30.000000000 +0900
@@ -457,6 +457,7 @@
       'aix': 'flock',
       'solaris': 'flock',
       'mac': 'mac',
+      'ios': 'mac',
       'win': 'win'
       }.get(flavor, None)
   if not prefix:
@@ -471,7 +472,7 @@
   # Set custom header flags.
   header = '# Generated by gyp. Do not edit.\n'
   mac_toolchain_dir =  generator_flags.get('mac_toolchain_dir', None)
-  if flavor == 'mac' and mac_toolchain_dir:
+  if flavor in ('mac', 'ios') and mac_toolchain_dir:
     header += "import os;\nos.environ['DEVELOPER_DIR']='%s'\n" \
         % mac_toolchain_dir
 
diff -ruN node-v14.13.0/tools/gyp/pylib/gyp/generator/make.py nodejs/tools/gyp/pylib/gyp/generator/make.py
--- node-v14.13.0/tools/gyp/pylib/gyp/generator/make.py	2020-09-30 01:58:15.000000000 +0900
+++ nodejs/tools/gyp/pylib/gyp/generator/make.py	2020-10-07 11:00:38.000000000 +0900
@@ -68,8 +68,8 @@
 def CalculateVariables(default_variables, params):
   """Calculate additional variables for use in the build (called by gyp)."""
   flavor = gyp.common.GetFlavor(params)
-  if flavor == 'mac':
-    default_variables.setdefault('OS', 'mac')
+  if flavor in ('mac', 'ios'):
+    default_variables.setdefault('OS', flavor)
     default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')
     default_variables.setdefault('SHARED_LIB_DIR',
                                  generator_default_variables['PRODUCT_DIR'])
@@ -751,7 +751,7 @@
     self.toolset = spec['toolset']
 
     self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)
-    if self.flavor == 'mac':
+    if self.flavor in ('mac', 'ios'):
       self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)
     else:
       self.xcode_settings = None
@@ -811,7 +811,7 @@
     # Sources.
     all_sources = spec.get('sources', []) + extra_sources
     if all_sources:
-      if self.flavor == 'mac':
+      if self.flavor in ('mac', 'ios'):
         # libtool on OS X generates warnings for duplicate basenames in the same
         # target.
         _ValidateSourcesForOSX(spec, all_sources)
@@ -919,7 +919,7 @@
 
       # Write the actual command.
       action_commands = action['action']
-      if self.flavor == 'mac':
+      if self.flavor in ('mac', 'ios'):
         action_commands = [gyp.xcode_emulation.ExpandEnvVars(command, env)
                           for command in action_commands]
       command = gyp.common.EncodePOSIXShellList(action_commands)
@@ -1071,7 +1071,7 @@
         # action, cd_action, and mkdirs get written to a toplevel variable
         # called cmd_foo. Toplevel variables can't handle things that change
         # per makefile like $(TARGET), so hardcode the target.
-        if self.flavor == 'mac':
+        if self.flavor in ('mac', 'ios'):
           action = [gyp.xcode_emulation.ExpandEnvVars(command, env)
                     for command in action]
         action = gyp.common.EncodePOSIXShellList(action)
@@ -1214,7 +1214,7 @@
       self.WriteList(config.get('defines'), 'DEFS_%s' % configname, prefix='-D',
           quoter=EscapeCppDefine)
 
-      if self.flavor == 'mac':
+      if self.flavor in ('mac', 'ios'):
         cflags = self.xcode_settings.GetCflags(configname)
         cflags_c = self.xcode_settings.GetCflagsC(configname)
         cflags_cc = self.xcode_settings.GetCflagsCC(configname)
@@ -1231,7 +1231,7 @@
       self.WriteList(cflags_c, 'CFLAGS_C_%s' % configname)
       self.WriteLn("# Flags passed to only C++ files.")
       self.WriteList(cflags_cc, 'CFLAGS_CC_%s' % configname)
-      if self.flavor == 'mac':
+      if self.flavor in ('mac', 'ios'):
         self.WriteLn("# Flags passed to only ObjC files.")
         self.WriteList(cflags_objc, 'CFLAGS_OBJC_%s' % configname)
         self.WriteLn("# Flags passed to only ObjC++ files.")
@@ -1294,7 +1294,7 @@
                    "%s " % precompiled_header.GetInclude('cc') +
                    "$(CFLAGS_$(BUILDTYPE)) "
                    "$(CFLAGS_CC_$(BUILDTYPE))")
-      if self.flavor == 'mac':
+      if self.flavor in ('mac', 'ios'):
         self.WriteLn("$(OBJS): GYP_OBJCFLAGS := "
                      "$(DEFS_$(BUILDTYPE)) "
                      "$(INCS_$(BUILDTYPE)) "
@@ -1359,7 +1359,7 @@
     """
     assert not self.is_mac_bundle
 
-    if self.flavor == 'mac' and self.type in (
+    if self.flavor in ('mac', 'ios') and self.type in (
         'static_library', 'executable', 'shared_library', 'loadable_module'):
       return self.xcode_settings.GetExecutablePath()
 
@@ -1395,7 +1395,7 @@
 
 
   def _InstallImmediately(self):
-    return self.toolset == 'target' and self.flavor == 'mac' and self.type in (
+    return self.toolset == 'target' and self.flavor in ('mac', 'ios') and self.type in (
           'static_library', 'executable', 'shared_library', 'loadable_module')
 
 
@@ -1478,7 +1478,7 @@
     if self.type != 'none':
       for configname in sorted(configs.keys()):
         config = configs[configname]
-        if self.flavor == 'mac':
+        if self.flavor in ('mac', 'ios'):
           ldflags = self.xcode_settings.GetLdflags(configname,
               generator_default_variables['PRODUCT_DIR'],
               lambda p: Sourceify(self.Absolutify(p)))
@@ -1505,28 +1505,28 @@
         library_dirs = config.get('library_dirs', [])
         ldflags += [('-L%s' % library_dir) for library_dir in library_dirs]
         self.WriteList(ldflags, 'LDFLAGS_%s' % configname)
-        if self.flavor == 'mac':
+        if self.flavor in ('mac', 'ios'):
           self.WriteList(self.xcode_settings.GetLibtoolflags(configname),
                          'LIBTOOLFLAGS_%s' % configname)
       libraries = spec.get('libraries')
       if libraries:
         # Remove duplicate entries
         libraries = gyp.common.uniquer(libraries)
-        if self.flavor == 'mac':
+        if self.flavor in ('mac', 'ios'):
           libraries = self.xcode_settings.AdjustLibraries(libraries)
       self.WriteList(libraries, 'LIBS')
       self.WriteLn('%s: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))' %
           QuoteSpaces(self.output_binary))
       self.WriteLn('%s: LIBS := $(LIBS)' % QuoteSpaces(self.output_binary))
 
-      if self.flavor == 'mac':
+      if self.flavor in ('mac', 'ios'):
         self.WriteLn('%s: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))' %
             QuoteSpaces(self.output_binary))
 
     # Postbuild actions. Like actions, but implicitly depend on the target's
     # output.
     postbuilds = []
-    if self.flavor == 'mac':
+    if self.flavor in ('mac', 'ios'):
       if target_postbuilds:
         postbuilds.append('$(TARGET_POSTBUILDS_$(BUILDTYPE))')
       postbuilds.extend(
@@ -1610,7 +1610,7 @@
       for link_dep in link_deps:
         assert ' ' not in link_dep, (
             "Spaces in alink input filenames not supported (%s)"  % link_dep)
-      if (self.flavor not in ('mac', 'openbsd', 'netbsd', 'win') and not
+      if (self.flavor not in ('mac', 'ios', 'openbsd', 'netbsd', 'win') and not
           self.is_standalone_static_library):
         self.WriteDoCmd([self.output_binary], link_deps, 'alink_thin',
                         part_of_all, postbuilds=postbuilds)
@@ -1666,7 +1666,7 @@
         file_desc = 'executable'
       install_path = self._InstallableTargetInstallPath()
       installable_deps = [self.output]
-      if (self.flavor == 'mac' and not 'product_dir' in spec and
+      if (self.flavor in ('mac', 'ios') and not 'product_dir' in spec and
           self.toolset == 'target'):
         # On mac, products are created in install_path immediately.
         assert install_path == self.output, '%s != %s' % (
@@ -1952,7 +1952,7 @@
     # Xcode puts shared_library results into PRODUCT_DIR, and some gyp files
     # rely on this. Emulate this behavior for mac.
     if (self.type == 'shared_library' and
-        (self.flavor != 'mac' or self.toolset != 'target')):
+        (self.flavor not in ('mac', 'ios') or self.toolset != 'target')):
       # Install all shared libs into a common directory (per toolset) for
       # convenient access with LD_LIBRARY_PATH.
       return '$(builddir)/lib.%s/%s' % (self.toolset, self.alias)
@@ -2066,7 +2066,7 @@
       'CXX.host':    GetEnvironFallback(('CXX_host', 'CXX'), 'g++'),
       'LINK.host':   GetEnvironFallback(('LINK_host', 'LINK'), '$(CXX.host)'),
     }
-  if flavor == 'mac':
+  if flavor in ('mac', 'ios'):
     flock_command = './gyp-mac-tool flock'
     header_params.update({
         'flock': flock_command,
@@ -2205,7 +2205,7 @@
     spec = target_dicts[qualified_target]
     configs = spec['configurations']
 
-    if flavor == 'mac':
+    if flavor in ('mac', 'ios'):
       gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(data[build_file], spec)
 
     writer = MakefileWriter(generator_flags, flavor)
diff -ruN node-v14.13.0/tools/gyp/pylib/gyp/xcode_emulation.py nodejs/tools/gyp/pylib/gyp/xcode_emulation.py
--- node-v14.13.0/tools/gyp/pylib/gyp/xcode_emulation.py	2020-09-30 01:58:15.000000000 +0900
+++ nodejs/tools/gyp/pylib/gyp/xcode_emulation.py	2020-10-07 11:01:44.000000000 +0900
@@ -531,8 +531,7 @@
     return XcodeSettings._sdk_path_cache[sdk_root]
 
   def _AppendPlatformVersionMinFlags(self, lst):
-    self._Appendf(lst, 'MACOSX_DEPLOYMENT_TARGET', '-mmacosx-version-min=%s')
-    if 'IPHONEOS_DEPLOYMENT_TARGET' in self._Settings():
+    if 'IPHONEOS_DEPLOYMENT_TARGET' in self._Settings() and self._Settings()['IPHONEOS_DEPLOYMENT_TARGET']:
       # TODO: Implement this better?
       sdk_path_basename = os.path.basename(self._SdkPath())
       if sdk_path_basename.lower().startswith('iphonesimulator'):
@@ -541,7 +540,9 @@
       else:
         self._Appendf(lst, 'IPHONEOS_DEPLOYMENT_TARGET',
                       '-miphoneos-version-min=%s')
-
+    else:
+      # Only use -mmacosx-version-min if it's not an iOS build.
+      self._Appendf(lst, 'MACOSX_DEPLOYMENT_TARGET', '-mmacosx-version-min=%s')
   def GetCflags(self, configname, arch=None):
     """Returns flags that need to be added to .c, .cc, .m, and .mm
     compilations."""
