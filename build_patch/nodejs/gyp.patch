diff -urN nodejs/tools/gyp/pylib/gyp/common.py nodejs+ios/tools/gyp/pylib/gyp/common.py
--- nodejs/tools/gyp/pylib/gyp/common.py	2020-10-07 13:47:43.000000000 -0400
+++ nodejs+ios/tools/gyp/pylib/gyp/common.py	2020-10-08 08:35:07.000000000 -0400
@@ -468,7 +468,7 @@
   to |out_path|."""
     # aix and solaris just need flock emulation. mac and win use more complicated
     # support scripts.
-    prefix = {"aix": "flock", "solaris": "flock", "mac": "mac", "win": "win"}.get(
+    prefix = {"aix": "flock", "solaris": "flock", "mac": "mac", "ios": "mac", "win": "win"}.get(
         flavor, None
     )
     if not prefix:
@@ -484,7 +484,7 @@
     # Set custom header flags.
     header = "# Generated by gyp. Do not edit.\n"
     mac_toolchain_dir = generator_flags.get("mac_toolchain_dir", None)
-    if flavor == "mac" and mac_toolchain_dir:
+    if flavor in ("mac", "ios") and mac_toolchain_dir:
         header += "import os;\nos.environ['DEVELOPER_DIR']='%s'\n" % mac_toolchain_dir
 
     # Add header and write it out.
diff -urN nodejs/tools/gyp/pylib/gyp/generator/make.py nodejs+ios/tools/gyp/pylib/gyp/generator/make.py
--- nodejs/tools/gyp/pylib/gyp/generator/make.py	2020-10-07 13:47:43.000000000 -0400
+++ nodejs+ios/tools/gyp/pylib/gyp/generator/make.py	2020-10-08 08:42:55.000000000 -0400
@@ -66,8 +66,8 @@
 def CalculateVariables(default_variables, params):
     """Calculate additional variables for use in the build (called by gyp)."""
     flavor = gyp.common.GetFlavor(params)
-    if flavor == "mac":
-        default_variables.setdefault("OS", "mac")
+    if flavor in ("mac", "ios"):
+        default_variables.setdefault("OS", flavor)
         default_variables.setdefault("SHARED_LIB_SUFFIX", ".dylib")
         default_variables.setdefault(
             "SHARED_LIB_DIR", generator_default_variables["PRODUCT_DIR"]
@@ -758,7 +758,7 @@
         self.toolset = spec["toolset"]
 
         self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)
-        if self.flavor == "mac":
+        if self.flavor in ("mac", "ios"):
             self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)
         else:
             self.xcode_settings = None
@@ -953,7 +953,7 @@
 
             # Write the actual command.
             action_commands = action["action"]
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 action_commands = [
                     gyp.xcode_emulation.ExpandEnvVars(command, env)
                     for command in action_commands
@@ -1127,7 +1127,7 @@
                 # action, cd_action, and mkdirs get written to a toplevel variable
                 # called cmd_foo. Toplevel variables can't handle things that change
                 # per makefile like $(TARGET), so hardcode the target.
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     action = [
                         gyp.xcode_emulation.ExpandEnvVars(command, env)
                         for command in action
@@ -1298,7 +1298,7 @@
                 quoter=EscapeCppDefine,
             )
 
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 cflags = self.xcode_settings.GetCflags(
                     configname,
                     arch=config.get('xcode_configuration_platform')
@@ -1318,7 +1318,7 @@
             self.WriteList(cflags_c, "CFLAGS_C_%s" % configname)
             self.WriteLn("# Flags passed to only C++ files.")
             self.WriteList(cflags_cc, "CFLAGS_CC_%s" % configname)
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 self.WriteLn("# Flags passed to only ObjC files.")
                 self.WriteList(cflags_objc, "CFLAGS_OBJC_%s" % configname)
                 self.WriteLn("# Flags passed to only ObjC++ files.")
@@ -1389,7 +1389,7 @@
                 "%s " % precompiled_header.GetInclude("cc") + "$(CFLAGS_$(BUILDTYPE)) "
                 "$(CFLAGS_CC_$(BUILDTYPE))"
             )
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 self.WriteLn(
                     "$(OBJS): GYP_OBJCFLAGS := "
                     "$(DEFS_$(BUILDTYPE)) "
@@ -1456,7 +1456,7 @@
     """
         assert not self.is_mac_bundle
 
-        if self.flavor == "mac" and self.type in (
+        if self.flavor in ("mac", "ios") and self.type in (
             "static_library",
             "executable",
             "shared_library",
@@ -1502,7 +1502,7 @@
     def _InstallImmediately(self):
         return (
             self.toolset == "target"
-            and self.flavor == "mac"
+            and self.flavor in ("mac", "ios")
             and self.type
             in ("static_library", "executable", "shared_library", "loadable_module")
         )
@@ -1592,7 +1592,7 @@
         if self.type != "none":
             for configname in sorted(configs.keys()):
                 config = configs[configname]
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     ldflags = self.xcode_settings.GetLdflags(
                         configname,
                         generator_default_variables["PRODUCT_DIR"],
@@ -1628,7 +1628,7 @@
                 library_dirs = config.get("library_dirs", [])
                 ldflags += [("-L%s" % library_dir) for library_dir in library_dirs]
                 self.WriteList(ldflags, "LDFLAGS_%s" % configname)
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     self.WriteList(
                         self.xcode_settings.GetLibtoolflags(configname),
                         "LIBTOOLFLAGS_%s" % configname,
@@ -1637,7 +1637,7 @@
             if libraries:
                 # Remove duplicate entries
                 libraries = gyp.common.uniquer(libraries)
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     libraries = self.xcode_settings.AdjustLibraries(libraries)
             self.WriteList(libraries, "LIBS")
             self.WriteLn(
@@ -1646,7 +1646,7 @@
             )
             self.WriteLn("%s: LIBS := $(LIBS)" % QuoteSpaces(self.output_binary))
 
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 self.WriteLn(
                     "%s: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))"
                     % QuoteSpaces(self.output_binary)
@@ -1655,7 +1655,7 @@
         # Postbuild actions. Like actions, but implicitly depend on the target's
         # output.
         postbuilds = []
-        if self.flavor == "mac":
+        if self.flavor in ("mac", "ios"):
             if target_postbuilds:
                 postbuilds.append("$(TARGET_POSTBUILDS_$(BUILDTYPE))")
             postbuilds.extend(gyp.xcode_emulation.GetSpecPostbuildCommands(spec))
@@ -1765,7 +1765,7 @@
                     "Spaces in alink input filenames not supported (%s)" % link_dep
                 )
             if (
-                self.flavor not in ("mac", "openbsd", "netbsd", "win")
+                self.flavor not in ("mac", "ios", "openbsd", "netbsd", "win")
                 and not self.is_standalone_static_library
             ):
                 self.WriteDoCmd(
@@ -1857,7 +1857,7 @@
             install_path = self._InstallableTargetInstallPath()
             installable_deps = [self.output]
             if (
-                self.flavor == "mac"
+                self.flavor in ("mac", "ios")
                 and "product_dir" not in spec
                 and self.toolset == "target"
             ):
@@ -2175,7 +2175,7 @@
         # Xcode puts shared_library results into PRODUCT_DIR, and some gyp files
         # rely on this. Emulate this behavior for mac.
         if self.type == "shared_library" and (
-            self.flavor != "mac" or self.toolset != "target"
+            self.flavor not in ("mac", "ios") or self.toolset != "target"
         ):
             # Install all shared libs into a common directory (per toolset) for
             # convenient access with LD_LIBRARY_PATH.
@@ -2296,7 +2296,7 @@
         "CXX.host": GetEnvironFallback(("CXX_host", "CXX"), "g++"),
         "LINK.host": GetEnvironFallback(("LINK_host", "LINK"), "$(CXX.host)"),
     }
-    if flavor == "mac":
+    if flavor in ("mac", "ios"):
         flock_command = "./gyp-mac-tool flock"
         header_params.update(
             {
@@ -2444,7 +2444,7 @@
         spec = target_dicts[qualified_target]
         configs = spec["configurations"]
 
-        if flavor == "mac":
+        if flavor in ("mac", "ios"):
             gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(data[build_file], spec)
 
         writer = MakefileWriter(generator_flags, flavor)
diff -urN nodejs/tools/gyp/pylib/gyp/xcode_emulation.py nodejs+ios/tools/gyp/pylib/gyp/xcode_emulation.py
--- nodejs/tools/gyp/pylib/gyp/xcode_emulation.py	2020-10-07 13:47:43.000000000 -0400
+++ nodejs+ios/tools/gyp/pylib/gyp/xcode_emulation.py	2020-10-08 08:45:50.000000000 -0400
@@ -558,8 +558,9 @@
         return XcodeSettings._sdk_path_cache[sdk_root]
 
     def _AppendPlatformVersionMinFlags(self, lst):
-        self._Appendf(lst, "MACOSX_DEPLOYMENT_TARGET", "-mmacosx-version-min=%s")
-        if "IPHONEOS_DEPLOYMENT_TARGET" in self._Settings():
+        #self._Appendf(lst, "MACOSX_DEPLOYMENT_TARGET", "-mmacosx-version-min=%s")
+        #if "IPHONEOS_DEPLOYMENT_TARGET" in self._Settings():
+        if "IPHONEOS_DEPLOYMENT_TARGET" in self._Settings() and self._Settings()["IPHONEOS_DEPLOYMENT_TARGET"]:
             # TODO: Implement this better?
             sdk_path_basename = os.path.basename(self._SdkPath())
             if sdk_path_basename.lower().startswith("iphonesimulator"):
@@ -570,6 +571,9 @@
                 self._Appendf(
                     lst, "IPHONEOS_DEPLOYMENT_TARGET", "-miphoneos-version-min=%s"
                 )
+        else:
+            # Only use -mmacosx-version-min if it's not an iOS build.
+            self._Appendf(lst, "MACOSX_DEPLOYMENT_TARGET", "-mmacosx-version-min=%s")
 
     def GetCflags(self, configname, arch=None):
         """Returns flags that need to be added to .c, .cc, .m, and .mm
