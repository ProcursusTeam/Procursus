From 339bfbfa64e5a03d9da4a187c998ca2807749435 Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Sun, 13 Sep 2020 00:19:05 -0400
Subject: [PATCH 01/14] Refresh dependencies.

---
 README.md | 43 ++++++++++++++++++++++++++++++-------------
 1 file changed, 30 insertions(+), 13 deletions(-)

diff --git a/README.md b/README.md
index bd06081e..6f3607b6 100644
--- a/README.md
+++ b/README.md
@@ -29,27 +29,44 @@ Recovery Nonce Collisions only occur on a few iOS versions, like iOS 9.3.3 and i
 
 DFU Nonce Collisions commonly occur on any device using A7 and A8 chipsets, regardless of iOS version.<br>and is much more reliable than using recovery collisions.
 
-# Dependencies
-*  ## Bundled libs
-  Those don't need to be installed manually
-  * [tss](https://github.com/libimobiledevice)
-* ## External libs
-  Make sure these are installed
+# Build
+Install dependencies
+
+* Buildsystem:
+  * autoconf
+  * automake
+  * libtool
+  * m4
+  * pkg-config
+
+* Tihmstar's tools:
+  * [libgeneral](https://github.com/tihmstar/libgeneral)
+  * [libfragmentzip](https://github.com/tihmstar/libfragmentzip)
+
+* External:
   * [libcurl](https://curl.haxx.se/libcurl/)
+  * [libirecovery](https://github.com/libimobiledevice/libirecovery)
   * [libplist](https://github.com/libimobiledevice/libplist)
-  * [libfragmentzip](https://github.com/tihmstar/libfragmentzip)
-  * [openssl](https://github.com/openssl/openssl) or commonCrypto on macOS/OS X;
-  * [libirecovery](https://github.com/libimobiledevice/libirecovery);
-* ## Submodules
-  Make sure these projects compile on your system
+  * [openssl](https://www.openssl.org/) or commonCrypto on macOS/OS X
+  
+* Submodules:
   * [jssy](https://github.com/tihmstar/jssy)
+  
+* Bundled libs, (not required to be installed manually):
+  * [tss](https://github.com/libimobiledevice)
 
-## Help  
+To compile, run:
 
+```bash
+./autogen.sh
+make
+sudo make install
+```
 
+# Help  
 Usage: `tsschecker [OPTIONS]`
 
-Example: `tsschecker -d iPhone10,1 -B D20AP -e <ecid> -i 13.4.1 --generator 0x1111111111111111 -s`
+Example: `tsschecker -d iPhone10,1 -B D20AP -e [ECID] -i 13.4.1 --generator 0x1111111111111111 -s`
 
 | option (short) | option (long)             | description                                                                       |
 |----------------|---------------------------|-----------------------------------------------------------------------------------|

From 4c6bd06c16c9ce43aa3691ba3ab2457829dae7cf Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Sun, 20 Sep 2020 01:02:20 -0400
Subject: [PATCH 02/14] Update tsschecker.c
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

• Organize the device list, making descriptions easier to read.
• Add support for the Apple Watch SE and Apple Watch Series 6.
• Add support for the iPad 8th generation.
• Add preliminary support for the iPad Air 4th generation.
• Fix incorrect bbgcid for the iPad 7th generation (iPad7,12).
---
 tsschecker/tsschecker.c | 222 +++++++++++++++++++++-------------------
 1 file changed, 117 insertions(+), 105 deletions(-)

diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index 1da3b97b..ad09a663 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -117,124 +117,136 @@ static struct bbdevice bbdevices[] = {
     {"iPod9,1", 0, 0}, // 7th gen
     
     // iPhones
-    {"iPhone3,1", 257, 12}, // iPhone 4 GSM
-    {"iPhone3,2", 257, 12}, // iPhone 4 GSM (2012, Rev A)
-    {"iPhone3,3", 2, 4}, // iPhone 4 CDMA
-    {"iPhone4,1", 2, 4}, // iPhone 4s
-    {"iPhone5,1", 3255536192, 4}, // iPhone 5 (GSM)
-    {"iPhone5,2", 3255536192, 4}, // iPhone 5 (Global)
-    {"iPhone5,3", 3554301762, 4}, // iPhone 5c (GSM)
-    {"iPhone5,4", 3554301762, 4}, // iPhone 5c (Global)
-    {"iPhone6,1", 3554301762, 4}, // iPhone 5s (GSM)
-    {"iPhone6,2", 3554301762, 4}, // iPhone 5s (Global)
-    {"iPhone7,1", 3840149528, 4}, // iPhone 6 Plus
-    {"iPhone7,2", 3840149528, 4}, // iPhone 6
-    {"iPhone8,1", 3840149528, 4}, // iPhone 6s
-    {"iPhone8,2", 3840149528, 4}, // iPhone 6s Plus
-    {"iPhone8,4", 3840149528, 4}, // iPhone SE
-    {"iPhone9,1", 2315222105, 4}, // iPhone 7 (Global)
-    {"iPhone9,2", 2315222105, 4}, // iPhone 7 Plus (Global)
-    {"iPhone9,3", 1421084145, 12}, // iPhone 7 GSM
-    {"iPhone9,4", 1421084145, 12}, // iPhone 7 Plus (GSM)
-    {"iPhone10,1", 2315222105, 4}, // iPhone 8 (Global)
-    {"iPhone10,2", 2315222105, 4}, // iPhone 8 Plus (Global)
-    {"iPhone10,3", 2315222105, 4}, // iPhone X (Global)
-    {"iPhone10,4", 524245983, 12}, // iPhone 8 (GSM)
-    {"iPhone10,5", 524245983, 12}, // iPhone 8 Plus (GSM)
-    {"iPhone10,6", 524245983, 12}, // iPhone X GSM
-    {"iPhone11,2", 165673526, 12}, // iPhone XS
-    {"iPhone11,4", 165673526, 12}, // iPhone XS Max (China)
-    {"iPhone11,6", 165673526, 12}, // iPhone XS Max (Global)
-    {"iPhone11,8", 165673526, 12}, // iPhone XR
-    {"iPhone12,1", 524245983, 12}, // iPhone 11
-    {"iPhone12,3", 524245983, 12}, // iPhone 11 Pro
-    {"iPhone12,5", 524245983, 12}, // iPhone 11 Pro Max
-    {"iPhone12,8", 524245983, 12}, // iPhone SE (2020)
+    {"iPhone3,1",  257, 12},        // iPhone 4 GSM
+    {"iPhone3,2",  257, 12},        // iPhone 4 GSM (2012, Rev A)
+    {"iPhone3,3",  2, 4},           // iPhone 4 CDMA
+    {"iPhone4,1",  2, 4},           // iPhone 4s
+    {"iPhone5,1",  3255536192, 4},  // iPhone 5 (GSM)
+    {"iPhone5,2",  3255536192, 4},  // iPhone 5 (Global)
+    {"iPhone5,3",  3554301762, 4},  // iPhone 5c (GSM)
+    {"iPhone5,4",  3554301762, 4},  // iPhone 5c (Global)
+    {"iPhone6,1",  3554301762, 4},  // iPhone 5s (GSM)
+    {"iPhone6,2",  3554301762, 4},  // iPhone 5s (Global)
+    {"iPhone7,1",  3840149528, 4},  // iPhone 6 Plus
+    {"iPhone7,2",  3840149528, 4},  // iPhone 6
+    {"iPhone8,1",  3840149528, 4},  // iPhone 6s
+    {"iPhone8,2",  3840149528, 4},  // iPhone 6s Plus
+    {"iPhone8,4",  3840149528, 4},  // iPhone SE
+    {"iPhone9,1",  2315222105, 4},  // iPhone 7 (Global)
+    {"iPhone9,2",  2315222105, 4},  // iPhone 7 Plus (Global)
+    {"iPhone9,3",  1421084145, 12}, // iPhone 7 GSM
+    {"iPhone9,4",  1421084145, 12}, // iPhone 7 Plus (GSM)
+    {"iPhone10,1", 2315222105, 4},  // iPhone 8 (Global)
+    {"iPhone10,2", 2315222105, 4},  // iPhone 8 Plus (Global)
+    {"iPhone10,3", 2315222105, 4},  // iPhone X (Global)
+    {"iPhone10,4", 524245983, 12},  // iPhone 8 (GSM)
+    {"iPhone10,5", 524245983, 12},  // iPhone 8 Plus (GSM)
+    {"iPhone10,6", 524245983, 12},  // iPhone X GSM
+    {"iPhone11,2", 165673526, 12},  // iPhone XS
+    {"iPhone11,4", 165673526, 12},  // iPhone XS Max (China)
+    {"iPhone11,6", 165673526, 12},  // iPhone XS Max (Global)
+    {"iPhone11,8", 165673526, 12},  // iPhone XR
+    {"iPhone12,1", 524245983, 12},  // iPhone 11
+    {"iPhone12,3", 524245983, 12},  // iPhone 11 Pro
+    {"iPhone12,5", 524245983, 12},  // iPhone 11 Pro Max
+    {"iPhone12,8", 524245983, 12},  // iPhone SE (2020)
     
     // iPads
-    {"iPad1,1", 0, 0}, // iPad (1st gen)
-    {"iPad2,1", 0, 0}, // iPad 2 Wi-Fi
-    {"iPad2,2", 257, 12}, // iPad 2 GSM
-    {"iPad2,3", 257, 12}, // iPad 2 CDMA
-    {"iPad2,4", 0, 0}, // iPad 2 Wi-Fi (2012, Rev A)
-    {"iPad3,1", 0, 0}, // the new iPad (3rd gen, Wi-Fi)
-    {"iPad3,2", 4, 4}, // the new iPad (3rd gen, CDMA)
-    {"iPad3,3", 4, 4}, // the new iPad (3rd gen, GSM)
-    {"iPad3,4", 0, 0}, // iPad with Retina display (4th gen, Wi-Fi)
-    {"iPad3,5", 3255536192, 4}, // iPad with Retina display (4th gen, CDMA)
-    {"iPad3,6", 3255536192, 4}, // iPad with Retina display (4th gen, GSM)
-    {"iPad6,11", 0, 0}, // iPad (5th gen, 2017, Wi-Fi)
+    {"iPad1,1",  0, 0},          // iPad (1st gen)
+    {"iPad2,1",  0, 0},          // iPad 2 Wi-Fi
+    {"iPad2,2",  257, 12},       // iPad 2 GSM
+    {"iPad2,3",  257, 12},       // iPad 2 CDMA
+    {"iPad2,4",  0, 0},          // iPad 2 Wi-Fi (2012, Rev A)
+    {"iPad3,1",  0, 0},          // iPad (3rd gen, Wi-Fi)
+    {"iPad3,2",  4, 4},          // iPad (3rd gen, CDMA)
+    {"iPad3,3",  4, 4},          // iPad (3rd gen, GSM)
+    {"iPad3,4",  0, 0},          // iPad with Retina display (4th gen, Wi-Fi)
+    {"iPad3,5",  3255536192, 4}, // iPad with Retina display (4th gen, CDMA)
+    {"iPad3,6",  3255536192, 4}, // iPad with Retina display (4th gen, GSM)
+    {"iPad6,11", 0, 0},          // iPad (5th gen, 2017, Wi-Fi)
     {"iPad6,12", 3840149528, 4}, // iPad (5th gen, 2017, Cellular)
-    {"iPad7,5", 0, 0}, // iPad (6th gen, 2018, Wi-Fi)
-    {"iPad7,6", 3840149528, 4}, // iPad (6th gen, 2018, Cellular)
-    {"iPad7,11", 0, 0}, // iPad (7th gen, 2019, Wi-Fi)
-    {"iPad7,12", 524245983, 12}, // iPad (7th gen, 2019, Cellular)
+    {"iPad7,5",  0, 0},          // iPad (6th gen, 2018, Wi-Fi)
+    {"iPad7,6",  3840149528, 4}, // iPad (6th gen, 2018, Cellular)
+    {"iPad7,11", 0, 0},          // iPad (7th gen, 2019, Wi-Fi)
+    {"iPad7,12", 165673526, 12}, // iPad (7th gen, 2019, Cellular)
+    {"iPad11,6", 0, 0},          // iPad (8th gen, 2020, Wi-Fi)
+    {"iPad11,7", 165673526, 12}, // iPad (8th gen, 2020, Cellular)
     
     // iPad minis
-    {"iPad2,5", 0, 0}, // iPad mini (1st gen, Wi-Fi)
-    {"iPad2,6", 3255536192, 4}, // iPad mini (1st gen, CDMA)
-    {"iPad2,7", 3255536192, 4}, // iPad mini (1st gen, GSM)
-    {"iPad4,4", 0, 0}, // iPad mini 2 (Wi-Fi)
-    {"iPad4,5", 3554301762, 4}, // iPad mini 2 (Cellular)
-    {"iPad4,6", 3554301762, 4}, // iPad mini 2 (Cellular, China)
-    {"iPad4,7", 0, 0}, // iPad mini 3 (Wi-Fi)
-    {"iPad4,8", 3554301762, 4}, // iPad mini 3 (Cellular)
-    {"iPad4,9", 3554301762, 4}, // iPad mini 3 (Cellular, China)
-    {"iPad5,1", 0, 0}, // iPad mini 4 (Wi-Fi)
-    {"iPad5,2", 3840149528, 4}, // iPad mini 4 (Cellular)
-    {"iPad11,1", 0, 0}, // iPad mini (5th gen, Wi-Fi)
+    {"iPad2,5",  0, 0},          // iPad mini (1st gen, Wi-Fi)
+    {"iPad2,6",  3255536192, 4}, // iPad mini (1st gen, CDMA)
+    {"iPad2,7",  3255536192, 4}, // iPad mini (1st gen, GSM)
+    {"iPad4,4",  0, 0},          // iPad mini 2 (Wi-Fi)
+    {"iPad4,5",  3554301762, 4}, // iPad mini 2 (Cellular)
+    {"iPad4,6",  3554301762, 4}, // iPad mini 2 (Cellular, China)
+    {"iPad4,7",  0, 0},          // iPad mini 3 (Wi-Fi)
+    {"iPad4,8",  3554301762, 4}, // iPad mini 3 (Cellular)
+    {"iPad4,9",  3554301762, 4}, // iPad mini 3 (Cellular, China)
+    {"iPad5,1",  0, 0},          // iPad mini 4 (Wi-Fi)
+    {"iPad5,2",  3840149528, 4}, // iPad mini 4 (Cellular)
+    {"iPad11,1", 0, 0},          // iPad mini (5th gen, Wi-Fi)
     {"iPad11,2", 165673526, 12}, // iPad mini (5th gen, Cellular)
     
     // iPad Airs
-    {"iPad4,1", 0, 0}, // iPad Air (Wi-Fi)
-    {"iPad4,2", 3554301762, 4}, // iPad Air (Cellular)
-    {"iPad4,3", 3554301762, 4}, // iPad Air (Cellular, China)
-    {"iPad5,3", 0, 0}, // iPad Air 2 (Wi-Fi)
-    {"iPad5,4", 3840149528, 4}, // iPad Air 2 (Cellular)
-    {"iPad11,3", 0, 0}, // iPad Air (3rd gen, Wi-Fi)
+    {"iPad4,1",  0, 0},          // iPad Air (Wi-Fi)
+    {"iPad4,2",  3554301762, 4}, // iPad Air (Cellular)
+    {"iPad4,3",  3554301762, 4}, // iPad Air (Cellular, China)
+    {"iPad5,3",  0, 0},          // iPad Air 2 (Wi-Fi)
+    {"iPad5,4",  3840149528, 4}, // iPad Air 2 (Cellular)
+    {"iPad11,3", 0, 0},          // iPad Air (3rd gen, Wi-Fi)
     {"iPad11,4", 165673526, 12}, // iPad Air (3rd gen, Cellular)
+    {"iPad13,1", 0, 0},          // iPad Air (4th gen, Wi-Fi)
+    {"iPad13,2", 524245983, 12}, // iPad Air (4th gen, Cellular)
     
     // iPad Pros
-    {"iPad6,3", 0, 0}, // iPad Pro (9,7", Wi-Fi)
-    {"iPad6,4", 3840149528, 4}, // iPad Pro (9,7", Cellular)
-    {"iPad6,7", 0, 0}, // iPad Pro (12.9", 1st gen, Wi-Fi)
-    {"iPad6,8", 3840149528, 4}, // iPad Pro (12.9", 1st gen, Cellular)
-    {"iPad7,1", 0, 0}, // iPad Pro (12.9", 2nd gen, Wi-Fi)
-    {"iPad7,2", 2315222105, 4}, // iPad Pro (12.9", 1st gen, Cellular)
-    {"iPad7,3", 0, 0}, // iPad Pro (10,5", Wi-Fi)
-    {"iPad7,4", 2315222105, 4}, // iPad Pro (10,5", Cellular)
-    {"iPad8,1", 0, 0}, // iPad Pro (11", Wi-Fi)
-    {"iPad8,2", 0, 0}, // iPad Pro (11", 1 TB model, Wi-Fi)
-    {"iPad8,3", 165673526, 12}, // iPad Pro 11", Cellular)
-    {"iPad8,4", 165673526, 12}, // iPad Pro 11", 1 TB model, Cellular)
-    {"iPad8,5", 0, 0}, // iPad Pro (12,9", 3rd gen, Wi-Fi)
-    {"iPad8,6", 0, 0}, // iPad Pro (12,9", 3rd gen, 1 TB model, Wi-Fi)
-    {"iPad8,7", 165673526, 12}, // iPad Pro 12,9", 3rd gen, Cellular)
-    {"iPad8,8", 165673526, 12}, // iPad Pro 12,9", 3rd gen, 1 TB model, Cellular)
-    {"iPad8,9", 0, 0}, // iPad Pro (11", 2nd gen, Wi-Fi)
-    {"iPad8,10", 524245983, 12}, // iPad Pro 11", 2nd gen, Cellular)
-    {"iPad8,11", 0, 0}, // iPad Pro (12,9", 4th gen, Wi-Fi)
-    {"iPad8,12", 524245983, 12}, // iPad Pro 12,9", 4th gen, Cellular)
+    {"iPad6,3",  0, 0},          // iPad Pro (9.7-inch, Wi-Fi)
+    {"iPad6,4",  3840149528, 4}, // iPad Pro (9.7-inch, Cellular)
+    {"iPad6,7",  0, 0},          // iPad Pro (12.9-inch, 1st gen, Wi-Fi)
+    {"iPad6,8",  3840149528, 4}, // iPad Pro (12.9-inch, 1st gen, Cellular)
+    {"iPad7,1",  0, 0},          // iPad Pro (12.9-inch, 2nd gen, Wi-Fi)
+    {"iPad7,2",  2315222105, 4}, // iPad Pro (12.9-inch, 2nd gen, Cellular)
+    {"iPad7,3",  0, 0},          // iPad Pro (10.5-inch, Wi-Fi)
+    {"iPad7,4",  2315222105, 4}, // iPad Pro (10.5-inch, Cellular)
+    {"iPad8,1",  0, 0},          // iPad Pro (11-inch, 1st gen, Wi-Fi)
+    {"iPad8,2",  0, 0},          // iPad Pro (11-inch, 1st gen, 1TB, Wi-Fi)
+    {"iPad8,3",  165673526, 12}, // iPad Pro (11-inch, 1st gen, Cellular)
+    {"iPad8,4",  165673526, 12}, // iPad Pro (11-inch, 1st gen, 1TB, Cellular)
+    {"iPad8,5",  0, 0},          // iPad Pro (12.9-inch, 3rd gen, Wi-Fi)
+    {"iPad8,6",  0, 0},          // iPad Pro (12.9-inch, 3rd gen, 1TB, Wi-Fi)
+    {"iPad8,7",  165673526, 12}, // iPad Pro (12.9-inch, 3rd gen, Cellular)
+    {"iPad8,8",  165673526, 12}, // iPad Pro (12.9-inch, 3rd gen, 1TB, Cellular)
+    {"iPad8,9",  0, 0},          // iPad Pro (11-inch, 2nd gen, Wi-Fi)
+    {"iPad8,10", 524245983, 12}, // iPad Pro (11-inch, 2nd gen, Cellular)
+    {"iPad8,11", 0, 0},          // iPad Pro (12.9-inch, 4th gen, Wi-Fi)
+    {"iPad8,12", 524245983, 12}, // iPad Pro (12.9-inch, 4th gen, Cellular)
     
     // Apple Watches
-    {"Watch1,1", 0, 0}, // Apple Watch 1st gen (38mm)
-    {"Watch1,2", 0, 0}, // Apple Watch 1st gen (42mm)
-    {"Watch2,6", 0, 0}, // Apple Watch Series 1 (38mm)
-    {"Watch2,7", 0, 0}, // Apple Watch Series 1 (42mm)
-    {"Watch2,3", 0, 0}, // Apple Watch Series 2 (38mm)
-    {"Watch2,4", 0, 0}, // Apple Watch Series 2 (42mm)
-    {"Watch3,1", 3840149528, 4}, // Apple Watch Series 3 (38mm GPS + Cellular)
-    {"Watch3,2", 3840149528, 4}, // Apple Watch Series 3 (42mm GPS + Cellular)
-    {"Watch3,3", 0, 0}, // Apple Watch Series 3 (38mm GPS)
-    {"Watch3,4", 0, 0}, // Apple Watch Series 3 (42mm GPS)
-    {"Watch4,1", 0, 0}, // Apple Watch Series 4 (40mm GPS)
-    {"Watch4,2", 0, 0}, // Apple Watch Series 4 (44mm GPS)
-    {"Watch4,3", 744114402, 12}, // Apple Watch Series 4 (40mm GPS + Cellular)
-    {"Watch4,4", 744114402, 12}, // Apple Watch Series 4 (44mm GPS + Cellular)
-    {"Watch5,1", 0, 0}, // Apple Watch Series 5 (40mm GPS)
-    {"Watch5,2", 0, 0}, // Apple Watch Series 5 (44mm GPS)
-    {"Watch5,3", 744114402, 12}, // Apple Watch Series 5 (40mm GPS + Cellular)
-    {"Watch5,4", 744114402, 12}, // Apple Watch Series 5 (44mm GPS + Cellular)
+    {"Watch1,1",  0, 0},          // Apple Watch 1st gen (38mm)
+    {"Watch1,2",  0, 0},          // Apple Watch 1st gen (42mm)
+    {"Watch2,6",  0, 0},          // Apple Watch Series 1 (38mm)
+    {"Watch2,7",  0, 0},          // Apple Watch Series 1 (42mm)
+    {"Watch2,3",  0, 0},          // Apple Watch Series 2 (38mm)
+    {"Watch2,4",  0, 0},          // Apple Watch Series 2 (42mm)
+    {"Watch3,1",  3840149528, 4}, // Apple Watch Series 3 (38mm GPS + Cellular)
+    {"Watch3,2",  3840149528, 4}, // Apple Watch Series 3 (42mm GPS + Cellular)
+    {"Watch3,3",  0, 0},          // Apple Watch Series 3 (38mm GPS)
+    {"Watch3,4",  0, 0},          // Apple Watch Series 3 (42mm GPS)
+    {"Watch4,1",  0, 0},          // Apple Watch Series 4 (40mm GPS)
+    {"Watch4,2",  0, 0},          // Apple Watch Series 4 (44mm GPS)
+    {"Watch4,3",  744114402, 12}, // Apple Watch Series 4 (40mm GPS + Cellular)
+    {"Watch4,4",  744114402, 12}, // Apple Watch Series 4 (44mm GPS + Cellular)
+    {"Watch5,1",  0, 0},          // Apple Watch Series 5 (40mm GPS)
+    {"Watch5,2",  0, 0},          // Apple Watch Series 5 (44mm GPS)
+    {"Watch5,3",  744114402, 12}, // Apple Watch Series 5 (40mm GPS + Cellular)
+    {"Watch5,4",  744114402, 12}, // Apple Watch Series 5 (44mm GPS + Cellular)
+    {"Watch5,9",  0, 0},          // Apple Watch SE (40mm GPS)
+    {"Watch5,10", 0, 0},          // Apple Watch SE (44mm GPS)
+    {"Watch5,11", 744114402, 12}, // Apple Watch SE (40mm GPS + Cellular)
+    {"Watch5,12", 744114402, 12}, // Apple Watch SE (44mm GPS + Cellular)
+    {"Watch6,1",  0, 0},          // Apple Watch Series 6 (40mm GPS)
+    {"Watch6,2",  0, 0},          // Apple Watch Series 6 (44mm GPS)
+    {"Watch6,3",  744114402, 12}, // Apple Watch Series 6 (40mm GPS + Cellular)
+    {"Watch6,4",  744114402, 12}, // Apple Watch Series 6 (44mm GPS + Cellular)
     
     // Apple TVs
     {"AppleTV1,1", 0, 0}, // 1st gen

From f92a48cd81b28c9149586f4a9099a8238db6c8ed Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Sun, 20 Sep 2020 01:10:18 -0400
Subject: [PATCH 03/14] Update tss.c
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

• fix logical bug in tss_request_add_ap_tags() when selecting 'only firmware components'
• remove trailing whitespace error from tss.c
---
 tsschecker/tss.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/tsschecker/tss.c b/tsschecker/tss.c
index e7f485a5..9d618abe 100644
--- a/tsschecker/tss.c
+++ b/tsschecker/tss.c
@@ -762,8 +762,12 @@ int tss_request_add_ap_tags(plist_t request, plist_t parameters, plist_t overrid
 
 		if (_plist_dict_get_bool(parameters, "_OnlyFWComponents")) {
 			plist_t info_dict = plist_dict_get_item(manifest_entry, "Info");
-			if (!_plist_dict_get_bool(manifest_entry, "Trusted") && !_plist_dict_get_bool(info_dict, "IsFirmwarePayload") && !_plist_dict_get_bool(info_dict, "IsSecondaryFirmwarePayload") && !_plist_dict_get_bool(info_dict, "IsFUDFirmware")) {
-				debug("DEBUG: %s: Skipping '%s' as it is neither firmware nor secondary firmware payload\n", __func__, key);
+			if (!_plist_dict_get_bool(manifest_entry, "Trusted")) {
+				debug("DEBUG: %s: Skipping '%s' as it is not trusted", __func__, key);
+				continue;
+			}
+			if (!_plist_dict_get_bool(info_dict, "IsFirmwarePayload") && !_plist_dict_get_bool(info_dict, "IsSecondaryFirmwarePayload") && !_plist_dict_get_bool(info_dict, "IsFUDFirmware")) {
+				debug("DEBUG: %s: Skipping '%s' as it is neither firmware nor secondary nor FUD firmware payload\n", __func__, key);
 				continue;
 			}
 		}
@@ -1585,7 +1589,7 @@ char* tss_request_send_raw(char* request, const char* server_url_string, int* re
         curl_easy_perform(handle);
         curl_slist_free_all(header);
         curl_easy_cleanup(handle);
-        
+
         if (strstr(response->content, "MESSAGE=SUCCESS")) {
             status_code = 0;
             info("success\n");

From 2a13906b3fdb6f95917fd70e7bbf23faaf4d7270 Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Wed, 7 Oct 2020 08:30:23 -0400
Subject: [PATCH 05/14] Update help and version

this was antiquated, so it's time for an update, especially since we have nonce-entangling these days.
also made the version number match what's seen in img4tool and libfragmentzip.
---
 README.md         | 34 +++++++++++++++++-----------------
 tsschecker/main.c | 44 ++++++++++++++++++++++----------------------
 2 files changed, 39 insertions(+), 39 deletions(-)

diff --git a/README.md b/README.md
index 6f3607b6..37cf72b2 100644
--- a/README.md
+++ b/README.md
@@ -14,7 +14,7 @@ By using all of its customization possibilities, you might discover a combinatio
 * `0xbd34a880be0b53f3` // used on Electra & Chimera jailbreaks
 * `0x1111111111111111` // used on unc0ver jailbreak
 
-## Nonce Entangling (Apple A12 and newer)
+## Nonce Entangling (Apple A12/S4 and newer)
 Newer devices, like the iPhone XR or the Apple Watch Series 4 have nonce-entangling enabled.
 
 this means the nonces generated by your device is now also UID derived, and consequently device-specific.<br>to save usable tickets for a newer device, you need to get the nonce that your device actually generates from your generator.
@@ -71,26 +71,26 @@ Example: `tsschecker -d iPhone10,1 -B D20AP -e [ECID] -i 13.4.1 --generator 0x11
 | option (short) | option (long)             | description                                                                       |
 |----------------|---------------------------|-----------------------------------------------------------------------------------|
 |  `-h`          | `--help`                  | prints usage information                                                          |        
-|  `-d`          | `--device MODEL`          | specify device by its model (eg. `iPhone4,1`)                                     |
-|  `-i`          | `--ios VERSION`           | specify firmware version (eg. `6.1.3`)                                                 |
-|  `-Z`	   | `--buildid BUILD `	| specific buildid instead of firmware version (eg. `13C75`)							               |
-|  `-B` 	   | `--boardconfig BOARD `	   | specific boardconfig instead of device model (eg. `n61ap`)						             |
+|  `-d`          | `--device MODEL`          | specify device by its model (eg. `iPhone8,1`)                                     |
+|  `-i`          | `--ios VERSION`           | specify firmware version (eg. `13.4.1`)                                                 |
+|  `-Z`	   | `--buildid BUILD `	| specific buildid instead of firmware version (eg. `17E255`)							               |
+|  `-B` 	   | `--boardconfig BOARD `	   | specific boardconfig instead of device model (eg. `n71ap`)						             |
 |  `-o`          | `--ota`	                 | check OTA signing status, instead of normal restore                               |
-|  `-b`          | `--no-baseband`           | don't check baseband signing status. Request a ticket without baseband            |
-|  `-m`          | `--build-manifest`   | manually specify buildmanifest (can be used with `-d`)                           | 
+|  `-b`          | `--no-baseband`           | don't check baseband signing status. Request tickets without baseband            |
+|  `-m`          | `--build-manifest`   | manually specify a BuildManifest (can be used with `-d`)                           | 
 |  `-s`          | `--save`		     		       | save fetched shsh blobs (mostly makes sense with -e)                              |
-|  `-u`          | `--update-install         `| request update ticket instead of erase                          |  
-|  `-l`	   | `--latest`  				       | use latest public firmware version instead of manually specifying one<br>especially useful with `-s` and `-e` for saving signing tickets                                                                                              |
-|  `-e`          | `--ecid ECID`	         | manually specify an ECID to be used for fetching blobs, instead of using random ones. <br>ECID must be either DEC or HEX eg. `5482657301265` or `ab46efcbf71`                                                          |
+|  `-u`          | `--update-install         `| request update tickets instead of erase                          |  
+|  `-l`	   | `--latest`  				       | use the latest public firmware version instead of manually specifying one<br/>especially useful with `-s` and `-e` for saving signing tickets                                                                                              |
+|  `-e`          | `--ecid ECID`	         | manually specify ECID to be used for fetching blobs, instead of using random ones.<br/>ECID must be either DEC or HEX eg. `5482657301265` or `ab46efcbf71`                                                          |
 |  `-g`          | `--generator GEN`        | manually specify generator in format 0x%%16llx                                                                                                        |
-|      			     | `--apnonce NONCE`   		   | manually specify ApNonce instead of using random one (not required for saving signing tickets) |
-|      			     | `--sepnonce NONCE`        | manually specify SepNonce instead of using random one (not required for saving signing tickets) 		                                                                                                                                  |
-|                           | `--bbsnum SNUM`        | manually specify BbSNUM in HEX for saving valid BBTicket (not required for saving blobs)                                                                                                                                   |
-|      			     | `--save-path PATH`        | specify path for saving blobs 		 											 |
-|                |`--beta`	             | request ticket for beta instead of normal release (use with `-o`)                |
+|      			     | `--apnonce NONCE`   		   | manually specify ApNonce instead of using random ones<br/>(required for saving blobs for A12/S4 and newer devices with generator) |
+|      			     | `--sepnonce NONCE`        | manually specify SepNonce instead of using random ones (not required for saving signing tickets) 		                                                                                                                                  |
+|                           | `--bbsnum SNUM`        | manually specify BbSNUM in HEX to save valid BBTickets (not required for saving blobs)                                                                                                                                   |
+|      			     | `--save-path PATH`        | specify path for saving shsh blobs 		 											 |
+|                |`--beta`	             | request ticket for a beta instead of normal release (use with `-o`)                |
 |                |`--list-devices`          | list all known devices                                                            |
 |                |`--list-ios`	             | list all known firmware versions                                                       |
 |                |`--nocache`       	     | ignore caches and re-download required files                                      |
-|                |`--print-tss-request`      | prints TSS request that will be sent to Apple                                      |
-|                |`--print-tss-response`     | prints TSS response that come from Apple                                  |
+|                |`--print-tss-request`      | print the TSS request that will be sent to Apple                                      |
+|                |`--print-tss-response`     | print the TSS response that comes from Apple                                  |
 |                |`--raw`     | send raw file to Apple's TSS server (useful for debugging)                                 |
diff --git a/tsschecker/main.c b/tsschecker/main.c
index 9976176f..d862e623 100644
--- a/tsschecker/main.c
+++ b/tsschecker/main.c
@@ -63,33 +63,33 @@ static struct option longopts[] = {
 };
 
 void cmd_help(){
-    printf("Usage: tsschecker [OPTIONS]\n");
-    printf("Checks (real) signing status of device/firmware\n\n");
+    printf("Checks (real) TSS signing status of device/firmware\n\n");
+    printf("Usage: tsschecker [OPTIONS]\n\n");
     printf("  -h, --help\t\t\tprints usage information\n");
-    printf("  -d, --device MODEL\t\tspecific device by its model (eg. iPhone4,1)\n");
-    printf("  -i, --ios VERSION\t\tspecific firmware version (eg. 6.1.3)\n");
-    printf("  -Z  --buildid BUILD \t\tspecific buildid instead of firmware version (eg. 13C75)\n");
-    printf("  -B, --boardconfig BOARD \tspecific boardconfig instead of device model (eg. n61ap)\n");
+    printf("  -d, --device MODEL\t\tspecify device by its model (eg. iPhone8,1)\n");
+    printf("  -i, --ios VERSION\t\tspecify firmware version (eg. 13.4.1)\n");
+    printf("  -Z  --buildid BUILD\t\tspecific buildid instead of firmware version (eg. 17E255)\n");
+    printf("  -B, --boardconfig BOARD \tspecific boardconfig instead of device model (eg. n71ap)\n");
     printf("  -o, --ota\t\t\tcheck OTA signing status, instead of normal restore\n");
-    printf("  -b, --no-baseband\t\tdon't check baseband signing status. Request a ticket without baseband\n");
-    printf("  -m, --build-manifest\t\tmanually specify buildmanifest (can be used with -d)\n");
+    printf("  -b, --no-baseband\t\tdon't check baseband signing status. Request tickets without baseband\n");
+    printf("  -m, --build-manifest\t\tmanually specify a BuildManifest (can be used with -d)\n");
     printf("  -s, --save\t\t\tsave fetched shsh blobs (mostly makes sense with -e)\n");
-    printf("  -u, --update-install\t\trequest update ticket instead of erase\n");
-    printf("  -l, --latest\t\t\tuse latest public firmware version instead of manually specifying one\n");
-    printf("                 \t\tespecially useful with -s and -e for saving signing tickets\n");
-    printf("  -e, --ecid ECID\t\tmanually specify ECID to be used for fetching signing tickets, instead of using random ones\n");
+    printf("  -u, --update-install\t\trequest update tickets instead of erase\n");
+    printf("  -l, --latest\t\t\tuse the latest public firmware version instead of manually specifying one\n");
+    printf("                 \t\tespecially useful with -s and -e for saving shsh blobs\n");
+    printf("  -e, --ecid ECID\t\tmanually specify ECID to be used for fetching blobs, instead of using random ones\n");
     printf("                 \t\tECID must be either DEC or HEX eg. 5482657301265 or ab46efcbf71\n");
-    printf("  -g, --generator GEN\t\tmanually specify generator in format 0x%%16llx\n");
-    printf("      --apnonce NONCE\t\tmanually specify ApNonce instead of using random one (not required for saving blobs)\n");
-    printf("      --sepnonce NONCE\t\tmanually specify SepNonce instead of using random one (not required for saving blobs)\n");
-    printf("      --bbsnum SNUM\t\tmanually specify BbSNUM in HEX for saving valid BBTicket (not required for saving blobs)\n");
-    printf("      --save-path PATH\t\tspecify path for saving signing tickets\n");
-    printf("      --beta\t\t\trequest ticket for beta instead of normal release (use with -o)\n");
+    printf("  -g, --generator GEN\t\tmanually specify generator in format 0x%%16llx\n\n");
+    printf("      --apnonce NONCE\t\tmanually specify ApNonce instead of using random ones\n\t\t\t\t(required for saving blobs for A12/S4 and newer devices with generator)\n\n");
+    printf("      --sepnonce NONCE\t\tmanually specify SepNonce instead of using random ones (not required for saving blobs)\n");
+    printf("      --bbsnum SNUM\t\tmanually specify BbSNUM in HEX to save valid BBTickets (not required for saving blobs)\n\n");
+    printf("      --save-path PATH\t\tspecify output path for saving shsh blobs\n");
+    printf("      --beta\t\t\trequest tickets for a beta instead of normal release (use with -o)\n");
     printf("      --list-devices\t\tlist all known devices\n");
     printf("      --list-ios\t\tlist all known firmware versions\n");
-    printf("      --nocache \t\tignore caches and redownload required files\n");
-    printf("      --print-tss-request\tprint TSS request that will be sent to Apple\n");
-    printf("      --print-tss-response\tprint TSS response that come from Apple\n");
+    printf("      --nocache \t\tignore caches and re-download required files\n");
+    printf("      --print-tss-request\tprint the TSS request that will be sent to Apple\n");
+    printf("      --print-tss-response\tprint the TSS response that comes from Apple\n");
     printf("      --raw\t\t\tsend raw file to Apple's TSS server (useful for debugging)\n\n");
 }
 
@@ -149,7 +149,7 @@ char *parseNonce(const char *nonce, size_t *parsedLen){
 int main(int argc, const char * argv[]) {
     int err = 0;
     int isSigned = 0;
-    printf("Version: "TSSCHECKER_VERSION_SHA" - "TSSCHECKER_VERSION_COUNT"\n");
+    printf("tsschecker version: "TSSCHECKER_VERSION_COUNT".0-"TSSCHECKER_VERSION_SHA"\n");
     printf("%s\n",fragmentzip_version());
     
     dbglog = 1;

From 546530cbe4c254d5d31eb985cde9764d720715bb Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Fri, 9 Oct 2020 19:23:23 -0400
Subject: [PATCH 06/14] build static app on windows.

build static app with proper linkage to the POSIX (libwinpthread-1) library.
and also allows multiple definitions since libirecovery and libplist seem to have multiple definitions.
---
 tsschecker/Makefile.am | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/tsschecker/Makefile.am b/tsschecker/Makefile.am
index 6f44ad16..bd55b539 100644
--- a/tsschecker/Makefile.am
+++ b/tsschecker/Makefile.am
@@ -17,3 +17,6 @@ tsschecker_LDADD = $(AM_LDFLAGS) libjssy.a
 
 tsschecker_SOURCES = tsschecker.c tss.c download.c main.c
 endif
+#ifdef WIN32
+tsschecker_LDFLAGS = -all-static -lpthread -Wl,--allow-multiple-definition $(AM_LDFLAGS)
+#endif

From 779ebb0d529395e0caa0a9a62d267a93d6bc4612 Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Fri, 9 Oct 2020 20:40:28 -0400
Subject: [PATCH 07/14] fix buildsystem and remove broken progressbar

* remove broken progress bar
* fix buildsystem
* properly detect OS for conditional settings.
---
 configure.ac            | 26 +++++++++++++++++++++++---
 tsschecker/Makefile.am  |  7 +++++--
 tsschecker/tsschecker.c | 13 ++-----------
 3 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/configure.ac b/configure.ac
index 5764ce46..54f44983 100644
--- a/configure.ac
+++ b/configure.ac
@@ -7,19 +7,39 @@ AC_CONFIG_SRCDIR([tsschecker/tsschecker.h])
 AC_CONFIG_HEADERS([config.h])
 
 # Check for operating system
+AC_CANONICAL_HOST
+
+build_linux=no
+build_windows=no
+build_mac=no
+
 AC_MSG_CHECKING([whether we need platform-specific build settings])
-case $host_os in
-  darwin* )
+case "${host_os}" in
+    linux*)
+        build_linux=yes
+        ;;
+    cygwin*|mingw*)
+        build_windows=yes
+        ;;
+    darwin*)
+        build_mac=yes
+        ;;
+    *)
+        AC_MSG_ERROR(["OS $host_os is not supported"])
         ;;
 esac
 
+# Pass the conditionals to automake
+AM_CONDITIONAL([LINUX], [test "$build_linux" = "yes"])
+AM_CONDITIONAL([WINDOWS], [test "$build_windows" = "yes"])
+AM_CONDITIONAL([OSX], [test "$build_mac" = "yes"])
+
 # Checks for programs.
 AC_PROG_CC
 CFLAGS+=" -std=gnu11"
 AC_PROG_INSTALL
 AC_PROG_LIBTOOL
 AC_CONFIG_MACRO_DIRS([m4])
-AC_CANONICAL_HOST
 
 # Versioning.
 CFLAGS+=" -D TSSCHECKER_VERSION_COUNT=\\\"$(git rev-list --count HEAD | tr -d '\n')\\\""
diff --git a/tsschecker/Makefile.am b/tsschecker/Makefile.am
index bd55b539..bd5f09f7 100644
--- a/tsschecker/Makefile.am
+++ b/tsschecker/Makefile.am
@@ -17,6 +17,9 @@ tsschecker_LDADD = $(AM_LDFLAGS) libjssy.a
 
 tsschecker_SOURCES = tsschecker.c tss.c download.c main.c
 endif
-#ifdef WIN32
+
+if WINDOWS
 tsschecker_LDFLAGS = -all-static -lpthread -Wl,--allow-multiple-definition $(AM_LDFLAGS)
-#endif
+else
+tsschecker_LDFLAGS = $(AM_LDFLAGS)
+endif
diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index be4eedac..e0d3e723 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -487,19 +487,10 @@ t_versionURL *getFirmwareUrls(const char *deviceModel, t_iosVersion *versVals, j
     return (t_versionURL*)rets_base;
 }
 
-static void printline(int percent){
-    info("%03d [",percent);for (int i=0; i<100; i++) putchar((percent >0) ? ((--percent > 0) ? '=' : '>') : ' ');
-    info("]");
-}
-
-static void fragmentzip_callback(unsigned int progress){
-    info("\x1b[A\033[J"); //clear 2 lines
-    printline((int)progress);
-    info("\n");
-}
+static void fragmentzip_callback(){}
 
 int downloadPartialzip(const char *url, const char *file, const char *dst){
-    log("[LFZP] downloading %s from %s\n\n",file,url);
+    log("[LFZP] downloading %s from %s\n",file,url);
     fragmentzip_t *info = fragmentzip_open(url);
     if (!info) {
         error("[LFZP] failed to open url\n");

From 5252d719fabf0b56a15925ff93ac3f164758745c Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Fri, 23 Oct 2020 11:33:12 -0400
Subject: [PATCH 08/14] Support the iPhone 12 model series

* Support the iPhone 12 model series.
* Fix original apple watch nonce length.
* Update tss client version string.
---
 tsschecker/tss.c        | 2 +-
 tsschecker/tsschecker.c | 5 +++++
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/tsschecker/tss.c b/tsschecker/tss.c
index 9d618abe..ebfaea57 100644
--- a/tsschecker/tss.c
+++ b/tsschecker/tss.c
@@ -48,7 +48,7 @@
 #include "tss.h"
 #include "endianness.h"
 
-#define TSS_CLIENT_VERSION_STRING "libauthinstall-698.0.5"
+#define TSS_CLIENT_VERSION_STRING "libauthinstall-776.40.16"
 #define ECID_STRSIZE 0x20
 #define GET_RAND(min, max) ((rand() % (max - min)) + min)
 
diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index e0d3e723..279c3a9f 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -150,6 +150,10 @@ static struct bbdevice bbdevices[] = {
     {"iPhone12,3", 524245983, 12},  // iPhone 11 Pro
     {"iPhone12,5", 524245983, 12},  // iPhone 11 Pro Max
     {"iPhone12,8", 524245983, 12},  // iPhone SE (2020)
+    {"iPhone13,1", 3095201109, 4},  // iPhone 12 mini
+    {"iPhone13,2", 3095201109, 4},  // iPhone 12
+    {"iPhone13,3", 3095201109, 4},  // iPhone 12 Pro
+    {"iPhone13,4", 3095201109, 4},  // iPhone 12 Pro Max
     
     // iPads
     {"iPad1,1",  0, 0},          // iPad (1st gen)
@@ -683,6 +687,7 @@ int tss_populate_random(plist_t tssreq, int is64bit, t_devicevals *devVals){
     if (strncasecmp(devVals->deviceModel, "AppleTV2,", strlen("AppleTV2,")) == 0 ||
             strncasecmp(devVals->deviceModel, "AppleTV3,", strlen("AppleTV3,")) == 0 ||
             strncasecmp(devVals->deviceModel, "AppleTV5,", strlen("AppleTV5,")) == 0 ||
+            strncasecmp(devVals->deviceModel, "Watch1,", strlen("Watch1,")) == 0 ||
             strncasecmp(devVals->deviceModel, "iPad1,", strlen("iPad1,")) == 0 ||
             strncasecmp(devVals->deviceModel, "iPad2,", strlen("iPad2,")) == 0 ||
             strncasecmp(devVals->deviceModel, "iPad3,", strlen("iPad3,")) == 0 ||

From 6a22d8d90af5f84f5def5cb8daaa8bb43dbaa584 Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Sun, 15 Nov 2020 23:18:02 -0500
Subject: [PATCH 09/14] Add HomePod support

* Add HomePod support
* Fix typo in tss.c ([373](https://github.com/libimobiledevice/idevicerestore/pull/373))
---
 tsschecker/tss.c        | 2 +-
 tsschecker/tsschecker.c | 8 +++++++-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/tsschecker/tss.c b/tsschecker/tss.c
index ebfaea57..9c2ad559 100644
--- a/tsschecker/tss.c
+++ b/tsschecker/tss.c
@@ -1558,7 +1558,7 @@ char* tss_request_send_raw(char* request, const char* server_url_string, int* re
         
         response = malloc(sizeof(tss_response));
         if (response == NULL) {
-            fprintf(stderr, "Unable to allocate sufficent memory\n");
+            fprintf(stderr, "Unable to allocate sufficient memory\n");
             return NULL;
         }
         
diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index 279c3a9f..0863ee83 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -252,6 +252,11 @@ static struct bbdevice bbdevices[] = {
     {"Watch6,3",  744114402, 12}, // Apple Watch Series 6 (40mm GPS + Cellular)
     {"Watch6,4",  744114402, 12}, // Apple Watch Series 6 (44mm GPS + Cellular)
     
+    // HomePods
+    {"AudioAccessory1,1", 0, 0}, // HomePod 1st gen
+    {"AudioAccessory1,2", 0, 0}, // HomePod 1st gen (2018)
+    {"AudioAccessory5,1", 0, 0}, // HomePod mini
+    
     // Apple TVs
     {"AppleTV1,1", 0, 0}, // 1st gen
     {"AppleTV2,1", 0, 0}, // 2nd gen
@@ -684,7 +689,8 @@ int tss_populate_random(plist_t tssreq, int is64bit, t_devicevals *devVals){
     if (!devVals->deviceModel)
         return error("[TSSR] internal error: devVals->deviceModel is missing\n"),-1;
 
-    if (strncasecmp(devVals->deviceModel, "AppleTV2,", strlen("AppleTV2,")) == 0 ||
+    if (strncasecmp(devVals->deviceModel, "AudioAccessory1,", strlen("AudioAccessory1,")) == 0 ||
+            strncasecmp(devVals->deviceModel, "AppleTV2,", strlen("AppleTV2,")) == 0 ||
             strncasecmp(devVals->deviceModel, "AppleTV3,", strlen("AppleTV3,")) == 0 ||
             strncasecmp(devVals->deviceModel, "AppleTV5,", strlen("AppleTV5,")) == 0 ||
             strncasecmp(devVals->deviceModel, "Watch1,", strlen("Watch1,")) == 0 ||

From 756dd0b26cb83f52aece25413f1a21f7dc73af91 Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Tue, 22 Dec 2020 00:47:31 -0500
Subject: [PATCH 11/14] Apple Silicon Mac support

adds support for checking the tss status on the new apple silicon macs.

- Mac mini (M1, 2020)
- MacBook Air (M1, 2020)
- MacBook Pro (13-inch, M1, 2020)

Other Changes:
- also supports Developer Transition Kit (ADP3,2).
---
 README.md               | 10 +++++-----
 tsschecker/tsschecker.c |  6 ++++++
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/README.md b/README.md
index 37cf72b2..519e2adf 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,5 @@
 # tsschecker  
-tsschecker is a powerful tool to check TSS signing status of various devices and iOS/iPadOS/tvOS/watchOS versions.
+tsschecker is a powerful tool to check TSS signing status on combinations of<br/>various devices and iOS/iPadOS/tvOS/watchOS/macOS firmware versions.
 
 ## Features  
 * Allows you to get lists of all devices as well as all Firmwares and OTA versions for a specific device.
@@ -7,7 +7,7 @@ tsschecker is a powerful tool to check TSS signing status of various devices and
 * Works without specifying any device relevant values to check signing status, but can be used to save blobs when given an ECID and the option --print-tss-response (although there are better tools to do this).
 
 tsschecker is not only meant to be used to check firmware signing status, but also to explore Apple's TSS servers.
-By using all of its customization possibilities, you might discover a combination of devices and iOS versions that is now getting signed but wasn't getting signed before. 
+By using all of its customization possibilities, you might discover a combination of devices and firmware versions that is getting signed but wasn't getting signed before. 
 
 # About nonces:
 ## recommended generators for saving tickets:
@@ -17,15 +17,15 @@ By using all of its customization possibilities, you might discover a combinatio
 ## Nonce Entangling (Apple A12/S4 and newer)
 Newer devices, like the iPhone XR or the Apple Watch Series 4 have nonce-entangling enabled.
 
-this means the nonces generated by your device is now also UID derived, and consequently device-specific.<br>to save usable tickets for a newer device, you need to get the nonce that your device actually generates from your generator.
+this means the boot nonces generated by your device are now also UID derived, and consequently device-specific.<br/>to save usable tickets for a newer device, you need to get the boot nonce that your device actually generates from your generator.
 
 for information on how to get your actual boot nonce, [see this post on r/jailbreak](https://www.reddit.com/r/jailbreak/comments/cssh8f/tutorial_easiest_way_to_save_blobs_on_a12/).
 
 ## Nonce Collisions:
 
-the Nonce Collision method only works on a few firmwares and devices, and isn't reliable.<br>it's better to save a ticket with a generator and use the [checkm8](https://github.com/axi0mx/ipwndfu) bootrom exploit.
+the Nonce Collision method only works on a few firmwares and devices, and isn't reliable.<br/>it's better to save a ticket with a generator and use the [checkm8](https://github.com/axi0mx/ipwndfu) bootrom exploit.
 
-Recovery Nonce Collisions only occur on a few iOS versions, like iOS 9.3.3 and iOS 10.1-10.2 on the iPhone 5s<br>and is not reliable as once you update, nonces will either generate differently or not collide anymore.
+Recovery Nonce Collisions only occur on a few iOS versions, like iOS 9.3.3 and iOS 10.1-10.2 on the iPhone 5s<br/>and is not reliable as once you update, your device will either generate different nonce or not collide nonces anymore.
 
 DFU Nonce Collisions commonly occur on any device using A7 and A8 chipsets, regardless of iOS version.<br>and is much more reliable than using recovery collisions.
 
diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index 0863ee83..a55b192e 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -108,6 +108,12 @@ const char *shshSavePath = "."DIRECTORY_DELIMITER_STR;
 
 // iPhone & iPod touch (1st generations) doesn't have signing technology.
 static struct bbdevice bbdevices[] = {
+    // Apple Silicon Macs
+    {"ADP3,2", 0, 0},         // Developer Transition Kit
+    {"Macmini9,1", 0, 0},     // Mac Mini (M1, 2020)
+    {"MacBookAir10,1", 0, 0}, // MacBook Air (M1, 2020)
+    {"MacBookPro17,1", 0, 0}, // MacBook Pro (13-inch, M1, 2020)
+    
     // iPod touches
     {"iPod2,1", 0, 0}, // 2nd gen
     {"iPod3,1", 0, 0}, // 3rd gen

From af69f55c0b2831248ef2b2527898a79e712afb67 Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Mon, 25 Jan 2021 04:37:02 -0500
Subject: [PATCH 12/14] Support the Apple T2 Coprocessor (iBridge)

---
 tsschecker/tsschecker.c | 20 +++++++++++++++++++-
 1 file changed, 19 insertions(+), 1 deletion(-)

diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index a55b192e..1b28521a 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -106,7 +106,7 @@ int nocache = 0;
 int save_shshblobs = 0;
 const char *shshSavePath = "."DIRECTORY_DELIMITER_STR;
 
-// iPhone & iPod touch (1st generations) doesn't have signing technology.
+// iPhone & iPod touch (1st generations) do not use SHSH or APTicket.
 static struct bbdevice bbdevices[] = {
     // Apple Silicon Macs
     {"ADP3,2", 0, 0},         // Developer Transition Kit
@@ -114,6 +114,24 @@ static struct bbdevice bbdevices[] = {
     {"MacBookAir10,1", 0, 0}, // MacBook Air (M1, 2020)
     {"MacBookPro17,1", 0, 0}, // MacBook Pro (13-inch, M1, 2020)
     
+    // Apple T2 Coprocessor
+    {"iBridge2,1", 0, 0}, // Apple T2 iMacPro1,1 (j137)
+    {"iBridge2,3", 0, 0}, // Apple T2 MacBookPro15,1 (j680)
+    {"iBridge2,4", 0, 0}, // Apple T2 MacBookPro15,2 (j132)
+    {"iBridge2,5", 0, 0}, // Apple T2 Macmini8,1 (j174)
+    {"iBridge2,6", 0, 0}, // Apple T2 MacPro7,1 (j160)
+    {"iBridge2,7", 0, 0}, // Apple T2 MacBookPro15,3 (j780)
+    {"iBridge2,8", 0, 0}, // Apple T2 MacBookAir8,1 (j140k)
+    {"iBridge2,10", 0, 0}, // Apple T2 MacBookPro15,4 (j213)
+    {"iBridge2,12", 0, 0}, // Apple T2 MacBookAir8,2 (j140a)
+    {"iBridge2,14", 0, 0}, // Apple T2 MacBookPro16,1 (j152f)
+    {"iBridge2,15", 0, 0}, // Apple T2 MacBookAir9,1 (j230k)
+    {"iBridge2,16", 0, 0}, // Apple T2 MacBookPro16,2 (j214k)
+    {"iBridge2,19", 0, 0}, // Apple T2 iMac20,1 (j185)
+    {"iBridge2,20", 0, 0}, // Apple T2 iMac20,2 (j185f)
+    {"iBridge2,21", 0, 0}, // Apple T2 MacBookPro16,3 (j223)
+    {"iBridge2,22", 0, 0}, // Apple T2 MacBookPro16,4 (j215)
+    
     // iPod touches
     {"iPod2,1", 0, 0}, // 2nd gen
     {"iPod3,1", 0, 0}, // 3rd gen

diff --git a/README.md b/README.md
index 519e2adf..567e6eeb 100644
--- a/README.md
+++ b/README.md
@@ -1,53 +1,59 @@
 # tsschecker  
-tsschecker is a powerful tool to check TSS signing status on combinations of<br/>various devices and iOS/iPadOS/tvOS/watchOS/macOS firmware versions.
+tsschecker is a powerful tool to check TSS signing status on combinations of various apple devices and firmware versions.
 
 ## Features  
-* Allows you to get lists of all devices as well as all Firmwares and OTA versions for a specific device.
-* Can check signing status for any firmware version (by specifying a `BuildManifest.plist`).
+* Supports Apple TV, Apple Watch, HomePod, iBridge, iPadOS, iOS and MacOS (Apple Silicon)
+* Allows you to get lists of supported apple devices as well as Firmwares and OTA versions for any specified apple device.
+* Can check signing status for any firmware version by specifying either a firmware version or a BuildManifest.
 * Works without specifying any device relevant values to check signing status, but can be used to save blobs when given an ECID and the option --print-tss-response (although there are better tools to do this).
 
-tsschecker is not only meant to be used to check firmware signing status, but also to explore Apple's TSS servers.
+tsschecker is not only meant to be used to check firmware signing status, but also to explore Apple's TSS servers.<br/>
 By using all of its customization possibilities, you might discover a combination of devices and firmware versions that is getting signed but wasn't getting signed before. 
 
 # About nonces:
 ## recommended generators for saving tickets:
-* `0xbd34a880be0b53f3` // used on Electra & Chimera jailbreaks
-* `0x1111111111111111` // used on unc0ver jailbreak
+* `0xbd34a880be0b53f3` // default on the Electra, Chimera and Odyssey jailbreak apps.
+* `0x1111111111111111` // default on the unc0ver jailbreak app.
 
 ## Nonce Entangling (Apple A12/S4 and newer)
-Newer devices, like the iPhone XR or the Apple Watch Series 4 have nonce-entangling enabled.
+Newer devices, such as the iPhone XR or the Apple Watch Series 4 (and any device newer) have nonce-entangling.
 
-this means the boot nonces generated by your device are now also UID derived, and consequently device-specific.<br/>to save usable tickets for a newer device, you need to get the boot nonce that your device actually generates from your generator.
+this means any boot nonce generated by your device is now also UID derived, and consequently device-specific.<br/>to save usable tickets for a newer device, you need to get the boot nonce that your device actually generates from your generator.
 
 for information on how to get your actual boot nonce, [see this post on r/jailbreak](https://www.reddit.com/r/jailbreak/comments/cssh8f/tutorial_easiest_way_to_save_blobs_on_a12/).
 
 ## Nonce Collisions:
 
-the Nonce Collision method only works on a few firmwares and devices, and isn't reliable.<br/>it's better to save a ticket with a generator and use the [checkm8](https://github.com/axi0mx/ipwndfu) bootrom exploit.
+the Nonce Collision method only works on a few firmwares and devices, and is not reliable and not recommended.<br/>it's a lot better to save a ticket with a generator and use the [checkm8](https://github.com/axi0mx/ipwndfu) bootrom exploit or a nonce setter.
 
-Recovery Nonce Collisions only occur on a few iOS versions, like iOS 9.3.3 and iOS 10.1-10.2 on the iPhone 5s<br/>and is not reliable as once you update, your device will either generate different nonce or not collide nonces anymore.
+Recovery Nonce Collisions only occur on a few iOS versions, like iOS 9.3.3 and iOS 10.1-10.2 on the iPhone 5s<br/>and is not reliable as once you update, your device will almost-certainly not collide nonces anymore.
 
-DFU Nonce Collisions commonly occur on any device using A7 and A8 chipsets, regardless of iOS version.<br>and is much more reliable than using recovery collisions.
+DFU Nonce Collisions on the other hand, very commonly occur on any device using A7 and A8 chipsets, regardless of iOS version<br/>and is MUCH more reliable than using recovery collisions.
 
 # Build
-Install dependencies
+Install or Compile dependencies
 
 * Buildsystem:
   * autoconf
+  * autoconf-archive
+  * autogen
   * automake
   * libtool
   * m4
+  * make
   * pkg-config
 
-* Tihmstar's tools:
+* Tihmstar's libs:
   * [libgeneral](https://github.com/tihmstar/libgeneral)
   * [libfragmentzip](https://github.com/tihmstar/libfragmentzip)
 
-* External:
+* External libs:
   * [libcurl](https://curl.haxx.se/libcurl/)
   * [libirecovery](https://github.com/libimobiledevice/libirecovery)
   * [libplist](https://github.com/libimobiledevice/libplist)
-  * [openssl](https://www.openssl.org/) or commonCrypto on macOS/OS X
+  * [libzip](https://libzip.org/)
+  * [openssl](https://www.openssl.org/) (or you can use CommonCrypto on macOS/OS X)
+  * [zlib](https://zlib.net/)
   
 * Submodules:
   * [jssy](https://github.com/tihmstar/jssy)
diff --git a/configure.ac b/configure.ac
index 54f44983..12cc9737 100644
--- a/configure.ac
+++ b/configure.ac
@@ -24,9 +24,6 @@ case "${host_os}" in
     darwin*)
         build_mac=yes
         ;;
-    *)
-        AC_MSG_ERROR(["OS $host_os is not supported"])
-        ;;
 esac
 
 # Pass the conditionals to automake

From 9ab8bb58137a4592304c6e13af1e8d6f23afc8dc Mon Sep 17 00:00:00 2001
From: Daniel <51378736+DanTheMann15@users.noreply.github.com>
Date: Tue, 2 Mar 2021 06:10:31 -0500
Subject: [PATCH 14/14] implement opa334's fixes and re-enable shared building
 (#10)

* implement opa334's tsschecker fixes
* re-enable dynamic building.
---
 tsschecker/Makefile.am  | 2 +-
 tsschecker/download.c   | 2 +-
 tsschecker/tsschecker.c | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/tsschecker/Makefile.am b/tsschecker/Makefile.am
index bd5f09f7..2ad74291 100644
--- a/tsschecker/Makefile.am
+++ b/tsschecker/Makefile.am
@@ -19,7 +19,7 @@ tsschecker_SOURCES = tsschecker.c tss.c download.c main.c
 endif
 
 if WINDOWS
-tsschecker_LDFLAGS = -all-static -lpthread -Wl,--allow-multiple-definition $(AM_LDFLAGS)
+tsschecker_LDFLAGS = -lpthread -Wl,--allow-multiple-definition $(AM_LDFLAGS)
 else
 tsschecker_LDFLAGS = $(AM_LDFLAGS)
 endif
diff --git a/tsschecker/download.c b/tsschecker/download.c
index 1ea2ee87..85ceda8e 100644
--- a/tsschecker/download.c
+++ b/tsschecker/download.c
@@ -18,7 +18,7 @@ int downloadFile(const char *url, const char *dstPath){
     info("[DOWN] downloading file %s\n",url);
     CURL *mcurl = curl_easy_init();
     
-    FILE *dfile = fopen(dstPath, "w");
+    FILE *dfile = fopen(dstPath, "wb");
     
     curl_easy_setopt(mcurl, CURLOPT_URL, url);
     curl_easy_setopt(mcurl, CURLOPT_TIMEOUT, 20L); //20 sec
diff --git a/tsschecker/tsschecker.c b/tsschecker/tsschecker.c
index 1b28521a..7a48ac9d 100644
--- a/tsschecker/tsschecker.c
+++ b/tsschecker/tsschecker.c
@@ -1006,7 +1006,7 @@ int isManifestBufSignedForDevice(char *buildManifestBuffer, t_devicevals *devVal
         snprintf(fname+prePathLen, fnamelen, DIRECTORY_DELIMITER_STR"%s_%s_%s-%s_%s.shsh%s",cecid,tmpDevicename,cpvers,cbuild, apnonce, (*devVals->generator || apticket2) ? "2" : "");
         
         
-        FILE *shshfile = fopen(fname, "w");
+        FILE *shshfile = fopen(fname, "wb");
         if (!shshfile) error("[Error] can't save shsh at %s\n",fname);
         else{
             fwrite(data, strlen(data), 1, shshfile);
